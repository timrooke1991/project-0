"use strict";var _slicedToArray=function(){function e(e,a){var t=[],s=!0,n=!1,r=void 0;try{for(var i,o=e[Symbol.iterator]();!(s=(i=o.next()).done)&&(t.push(i.value),!a||t.length!==a);s=!0);}catch(e){n=!0,r=e}finally{try{!s&&o.return&&o.return()}finally{if(n)throw r}}return t}return function(a,t){if(Array.isArray(a))return a;if(Symbol.iterator in Object(a))return e(a,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();$(function(){function e(e){$(".team-panel").html(""),$(".formation").val(e.formation),e.players.sort(function(e,a){return M.indexOf(e.position)<M.indexOf(a.position)?-1:1});for(var a=0;a<e.players.length;a++){var t=e.players[a],s=t.playing?"&#10004;":"&#10007;";$(".team-panel").append('<p class="player-line '+t.position+" "+t.status+"\" id='"+t.name+"'>\n          <span class=\"starting "+t.status+'" id="'+a+'">'+s+'</span>\n          <span class="player-position ">'+t.position+'</span>\n          <span class="player-name">'+t.name+'</span>\n          <span class="player-stat">'+t.attack+'</span>\n          <span class="player-stat">'+t.defence+'</span>\n          <span class="player-stat">'+t.creativity+'</span>\n          <span class="player-stat">'+t.defence+'</span>\n          <span class="player-stat">'+t.fitness+"</span>\n        </p>")}}function a(e){$(".team-display").html("");var a=["1"].concat(e.formation.split("-")),t=0,s=0;try{a.map(function(a){for(var n=parseFloat(a),r=0;r<n;){if(e.players[t].playing||"ejected"===e.players[t].status){var i=M[s]!==e.players[t].position?"warning":"";$(".team-display").append("<span class='player-block "+i+" "+e.players[t].status+"'>"+e.players[t].name+"</span>"),e.players[t].chosenPosition=M[s],r++}t++}$(".team-display").append('<div class="seperate-players">'),s++})}catch(e){$(".team-display").append("<p class='team-selection-warning seperate-players'>Less than 11 players selected!</p>")}}function t(e,t){if(e.players[t].playing=!e.players[t].playing,a(x),e.players[t].playing){if($("#"+t).html("&#10004;"),z){console.log("clicked"),$("#"+t).parent().css({background:"green"});var n=e.players[t];s(e,n)}}else if($("#"+t).html("&#10007;"),z){$("#"+t).parent().css({"pointer-events":"none",background:"red"});var r=e.players[t];s(e,r)}}function s(e,a){e.subs<7?a.playing?($("#"+e.place+"Events").append("<i class='fa fa-arrow-right' style='font-size: 22px; color:green; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+a.name+" substituted<br/>"),e.subs+=1,a.playing=!0,a.status="subbed-on"):($("#"+e.place+"Events").append("<i class='fa fa-arrow-right' style='font-size: 22px; color:red; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+a.name+" substituted<br/>"),e.subs+=1,a.playing=!1,a.status="subbed-off"):console.log("You have had 3 subs!")}function n(){44===P&&(k.text("That's half-time!"),T=!T,v.text("Play")),90===P?(k.text("That's full-time!"),clearInterval(j),v.text("Finish")):(P++,g.text(P))}function r(e){return Math.floor(Math.random()*e)}function i(){var e=document.getElementById("homeBar");V=E.averagePlayerValues("creativity")/(E.averagePlayerValues("creativity")+F.averagePlayerValues("creativity"))*100+(Math.random()<.5?-r(6):r(6)),e.style.width=V+"%"}function o(){return r(E.averagePlayerValues("creativity")+E.averagePlayerValues("fitness"))>=r(F.averagePlayerValues("creativity")+F.averagePlayerValues("fitness"))?(k.css("background-color",E.colors[0]),k.css("color",E.colors[1]),r(20)%4==0&&(k.text(y("chance","")),E.increaseValues(3,"attack",["midfielder","striker"]),E.increaseValues(3,"creativity",["midfielder","striker"])),[E,F]):(k.css("background-color",F.colors[0]),k.css("color",F.colors[1]),r(20)%4==0&&(F.increaseValues(3,"attack",["midfielder","striker"]),F.increaseValues(3,"creativity",["midfielder","striker"]),k.text(y("chance",""))),[F,E])}function l(e,a){var t=e.randomPlayer(),s=a.randomPlayerByPosition("defender");r(t.attack)>r(s.defence)&&(y("goal",t),h(e),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='font-size: 22px; color:white; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" scored<br/>"))}function c(e,a){var t=a.randomPlayer();r(t.discipline)+(100-P)<90&&"ejected"!==t.status&&("yellow"===t.status?(k.css("background-color","#FF0000"),k.css("color","#FFFFFF"),a.reduceValues(10,"defence",["striker","midfielder","defender","goalkeeper"]),a.reduceValues(25,"attack",["striker","midfielder","defender","goalkeeper"]),a.reduceValues(25,"creativity",["striker","midfielder","defender","goalkeeper"]),y("secondYellow",t),$("#"+a.place+"Events").append("<i class='fa fa-square event-item' style='font-size: 24px; color: red; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" sent off<br/>"),t.status="ejected",t.playing=!1):(k.css("background-color","yellow"),k.css("color","#000000"),y("yellow",t),t.defence-=8,$("#"+a.place+"Events").append("\n          <i class='fa fa-square event-item' style='font-size: 24px; color: yellow; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" booked<br/>"),t.status="yellow",t.fitness-=r(5)))}function d(e){var a=e.randomPlayer();if(r(101)%40==0)if(y("injury",a),$("#"+e.place+"Events").append("<i class='fa fa-plus' style='font-size: 26px; color: green; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+a.name+" injured<br/>"),"away"===e.place&&B){a.playing=!a.playing,s(F,a);var t=F.randomSubstitute(a.position);t.playing=!t.playing,s(F,t)}else a.fitness=0+r(30),a.status="injured",a.playing=!1;else a.fitness-=r(15),a.defence-=r(10),a.attack-=r(10),y("nearMiss",a)}function p(e,a){var t=e.randomPlayerByPosition("midfielder"),s=a.randomPlayerByPosition("goalkeeper").defence+a.averagePlayerValues("defender");t.attack>s?(h(e),y("freekick",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='font-size: 22px; color:white; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" scored<br/>"),t.attack+=5):(y("wastedFreekick",t),t.creativity-=5,e.reduceValues(r(10),"attack",["striker","midfielder"]),e.reduceValues(r(10),"creativity",["striker","midfielder"]))}function u(e,a){var t=e.randomPlayerByPosition("striker"),s=a.randomPlayerByPosition("goalkeeper"),n=a.randomPlayerByPosition("defender");r(100)>25&&(n.status="yellow",$("#"+a.place+"Events").append("<i class='fa fa-square event-item' style='font-size: 24px; color: yellow; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+n.name+" booked<br/>")),2*r(t.attack)>r(s.defence)?(h(e),y("penalty",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='font-size: 22px; color:white; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" scores penalty<br/>"),t.attack+=5):(y("missedPenalty",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='font-size: 22px; color:red; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" missed penalty<br/>"),s.defence+=10,t.attack-=10)}function f(e){var a=e.randomPlayer();r(a.discipline)+(100-P)<25&&(a.playing=!1,a.status="ejected",y("straightRed",a),$("#"+e.place+"Events").append("<i class='fa fa-square' style='font-size: 24px; color: red; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+a.name+" sent off<br/>"))}function m(e,a){if(null===E){switch($(".home-team  .team-name").text(a),a){case"Tottenham":E=spurs;break;case"Man United":E=manUnited;break;case"Liverpool":E=liverpool;break;case"Man City":E=manCity;break;case"Everton":E=everton;break;case"Chelsea":E=chelsea;break;case"Leicester":E=leicester;break;case"Arsenal":E=arsenal}E.place="home",$(".home-team, #homeBar").css("background-color",E.colors[0]),$(".home-team").css("color",E.colors[1])}else{switch($(".away-team .team-name").text(a),a){case"Tottenham":F=spurs;break;case"Man United":F=manUnited;break;case"Liverpool":F=liverpool;break;case"Man City":F=manCity;break;case"Everton":F=everton;break;case"Chelsea":F=chelsea;break;case"Leicester":F=leicester;break;case"Arsenal":F=arsenal}F.place="away",$(".away-team, .possession-bar").css("background-color",F.colors[0]),$(".away-team").css("color",F.colors[1])}}function y(e,a){var t={goal:["Goal!","He's scored!","That's a great finish!","What a goal by "+a.name,a.name+" finishes off the move!"],freekick:["It's a freekick",a.name+" to take the freekick","He lines up the freekick","This is a chance to get a cross in"],wastedFreekick:[a.name+" loses possession","That's ended up in row Z","The attack amounts to nothing",a.name+" has wasted that opportunity",a.name+"'s effort goes over the bar","He hands back possession to the other team"],yellow:["He's going in the book","Ouch! "+a.name+" will get a yellow for that","That's a booking","It's a yellow!","The ref is taking his name"],secondYellow:["He's already been booked...","That's a second yellow",a.name+" is shown a red!",a.name+" is off"],straightRed:[a.name+" is shown a straight red!",a.name+" is off","The ref has given him straight red!"],penalty:["The referee points to the spot","That's a penalty",a.name+" is fouled in the area","The ref blows his whistle. Penalty."],missedPenalty:["Saved!","It's over the bar",a.name+" has missed it!","Oh dear! "+a.name+"'s put it wide'"],injury:[a.name+"'s is going off",a.name+" is injured",a.name+" can't continue"],chance:["The ball is wasted","Possession is sloppily given away","That is wasted","The referee pulls back play","The ball goes out for a throw","Good interception!","He's robbed him of possesion","That was a wayward ball","He can't quite get on the end of that one"],nearMiss:[a.name+" is limping, but he'll be okay","That's a sore one.",a.name+" looks to be struggling","There's a nasty coming together","The referee waves play on"]},s=r(t[e].length),n=t[e][s];k.text(""+n)}function h(e){var a=null,t=null;"home"===e.place?(t=b.text(),a=parseFloat(t)+1,b.text(a)):(t=w.text(),a=parseFloat(t)+1,w.text(a))}var g=$(".changing-minutes"),k=$("#commentaryBox"),v=$(".primary-button"),b=$(".home-team .score"),w=$(".away-team .score"),x=null,P=0,T=!1,V=50,E=null,F=null,z=!1,B=!0,M=["goalkeeper","defender","midfielder","striker"],j=setInterval(function(){if(T){var e=r(100)+1;console.log(P+": "+e);var a=o(),t=_slicedToArray(a,2),m=t[0],y=t[1];if(e%17==0&&(l(m,y),m.increaseValues(5,"attack",["midfielder","striker"]),m.increaseValues(5,"creativity",["midfielder","striker"]),y.reduceValues(5,"defence",["midfielder","defender","goalkeeper"])),e%(r(30)+90)==0&&(u(m,y),y.reduceValues(3,"defence",["midfielder","defender","goalkeeper"])),e%90==0&&(f(y),y.reduceValues(25,"defence",["striker","midfielder","defender","goalkeeper"]),y.reduceValues(25,"attack",["striker","midfielder","defender","goalkeeper"]),y.reduceValues(25,"creativity",["striker","midfielder","defender","goalkeeper"])),e%22==0&&(p(m,y),m.increaseValues(5,"attack",["midfielder","striker"]),m.increaseValues(5,"creativity",["midfielder","striker"])),e%18==0&&c(m,y),e%25==0&&(d(m),y.reduceValues(3,"creativity",["striker","midfielder","defender","goalkeeper"])),B&&e%10==0&&F.subs<6&&P>50){var h=r(M.length)+1,g=M[h];if(M[h]){var k=F.randomPlayerByPosition(g,"subbed-on");k.playing=!k.playing,s(F,k);var v=F.randomSubstitute(g);v.playing=!v.playing,s(F,v)}}var b=r(M.length)+1,w=M[b];y.reduceValues(r(10),"fitness",[w]),i(),n()}},500);$(".team-input").on("click",function(e){var a=e.target.innerHTML;null===E?(m(E,a),$(".title-message").text("Home team chosen. Now chose your opponent."),$(e.target).attr("disabled",!0)):(m(F,a),$(".title-message").text("Opponent selected. Now edit tactics or proceed to match."),$(e.target).attr("disabled",!0))}),$("#playerMode").on("click",function(){B=!B}),$(".team-panel").on("click",function(e){var a=e.target.id;t(x,a)}),v.on("click",function(){T=!T,$("#match-setup, .info-message, .team-setup").hide(),$("#match-engine, .away-team, .home-team, .timer").show(),T?(v.text("Pause"),z=!0):v.text("Play")}),$("#homeTeam").on("click",function(){T&&(T=!T),v.text("Play"),$(".match-setup, .match-engine").hide(),$(".team-setup").show(),e(E),x=E,a(x)}),$("#awayTeam").on("click",function(){T&&(T=!T),v.text("Play"),$(".match-setup, .match-engine").hide(),$(".team-setup").show(),e(F),x=F,a(x)}),$(".go-back").on("click",function(){$(".team-setup").hide(),$(".match-setup").show()}),$(".formation").on("change",function(e){var t=e.target.value;x.formation=t,a(x)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
