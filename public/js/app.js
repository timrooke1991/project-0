"use strict";var _slicedToArray=function(){function e(e,a){var t=[],s=!0,r=!1,n=void 0;try{for(var i,o=e[Symbol.iterator]();!(s=(i=o.next()).done)&&(t.push(i.value),!a||t.length!==a);s=!0);}catch(e){r=!0,n=e}finally{try{!s&&o.return&&o.return()}finally{if(r)throw n}}return t}return function(a,t){if(Array.isArray(a))return a;if(Symbol.iterator in Object(a))return e(a,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();$(function(){function e(e){F&&(F=!F),P.text("Play"),$(".match-setup, .match-engine").hide(),$(".team-setup").show(),a(e),x=e,t(x)}function a(e){$(".team-panel").html(""),$(".formation").val(e.formation),e.players.sort(function(e,a){return C.indexOf(e.position)<C.indexOf(a.position)?-1:1});for(var a=0;a<e.players.length;a++){var t=e.players[a],s=t.playing?"&#10004;":"&#10007;";$(".team-panel").append('<p class="player-line '+t.position+" "+t.status+"\" id='"+t.name+"'>\n          <span class=\"starting "+t.status+'" id="'+a+'">'+s+'</span>\n          <span class="player-position ">'+t.position+'</span>\n          <span class="player-name">'+t.name+'</span>\n          <span class="player-stat" data-sort="'+t.attack+'" style="background-color: rgba(0,128,0,'+t.attack/100+')">'+t.attack+'</span>\n          <span class="player-stat" style="background-color: rgba(0,128,0,'+t.defence/100+')">'+t.defence+'</span>\n          <span class="player-stat" style="background-color: rgba(0,128,0,'+t.creativity/100+'")>'+t.creativity+'</span>\n          <span class="player-stat" style="background-color: rgba(0,128,0,'+t.defence/100+')">'+t.defence+'</span>\n          <span class="player-stat" style="background-color: rgba(0,128,0,'+t.fitness/100+')">'+t.fitness+"</span>\n        </p>")}}function t(e){$(".team-display").html("");var a=["1"].concat(e.formation.split("-")),t=0,s=0;try{a.map(function(a){for(var r=parseFloat(a),n=0;n<r;){if(e.players[t].playing||"ejected"===e.players[t].status){var i=C[s]!==e.players[t].position?"warning":"";$(".team-display").append("<span class='player-block "+i+" "+e.players[t].status+"'>"+e.players[t].name+"</span>"),e.players[t].chosenPosition=C[s],n++}t++}$(".team-display").append('<div class="seperate-players">'),s++})}catch(e){$(".team-display").append("<p class='team-selection-warning seperate-players'>Less than 11 players selected!</p>")}}function s(e,a){var s=$("#"+a);if(e.players[a].playing=!e.players[a].playing,t(x),e.players[a].playing){if(s.html("&#10004;"),H){s.parent().css({background:"green"});var n=e.players[a];r(e,n)}}else if(s.html("&#10007;"),H){s.parent().css({"pointer-events":"none",background:"red"});var i=e.players[a];r(e,i)}}function r(e,a){e.subs<7?a.playing?($("#"+e.place+"Events").append("<i class='fa fa-arrow-right' style='color:green;' aria-hidden='true'></i> "+E+" mins: "+a.name+" substituted<br/>"),e.subs+=1,a.playing=!0,a.status="subbed-on"):($("#"+e.place+"Events").append("<i class='fa fa-arrow-right' style='color:red;' aria-hidden='true'></i> "+E+" mins: "+a.name+" substituted<br/>"),e.subs+=1,a.playing=!1,a.status="subbed-off"):console.log("You have had 3 subs!")}function n(){44===E&&(w.text("That's half-time!"),F=!F,P.text("Play")),90===E?(w.text("That's full-time!"),clearInterval(I),P.text("Finish")):(E++,v.text(E))}function i(e){return Math.floor(Math.random()*e)}function o(){var e=document.getElementById("homeBar");B=M.averagePlayerValues("creativity")/(M.averagePlayerValues("creativity")+j.averagePlayerValues("creativity"))*100+(Math.random()<.5?-i(6):i(6)),e.style.width=B+"%"}function l(){return i(M.averagePlayerValues("creativity")+M.averagePlayerValues("fitness"))>=i(j.averagePlayerValues("creativity")+j.averagePlayerValues("fitness"))?[M,j]:[j,M]}function c(e){w.css("background-color",e.colors[0]),w.css("color",e.colors[1]),i(20)%4==0&&(e.increaseValues(3,"attack",["midfielder","striker"]),e.increaseValues(3,"creativity",["midfielder","striker"]),w.text(g("chance","")))}function d(e,a){var t=e.randomPlayer(),s=a.randomPlayerByPosition("defender");i(t.attack)>i(s.defence)&&(g("goal",t),k(e),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='color:white;' aria-hidden='true'></i> "+E+" mins: "+t.name+" scored<br/>"))}function p(e,a){var t=a.randomPlayer();i(t.discipline)+(100-E)<90&&"ejected"!==t.status&&("yellow"===t.status?(w.css("background-color","#FF0000"),w.css("color","#FFFFFF"),a.reduceValues(20,"defence",["striker","midfielder","defender","goalkeeper"]),a.reduceValues(20,"attack",["striker","midfielder","defender","goalkeeper"]),a.reduceValues(20,"creativity",["striker","midfielder","defender","goalkeeper"]),g("secondYellow",t),$("#"+a.place+"Events").append("<i class='fa fa-square event-item' style='color: red;' aria-hidden='true'></i> "+E+" mins: "+t.name+" sent off<br/>"),t.status="ejected",t.playing=!1):(w.css("background-color","yellow"),w.css("color","#000000"),g("yellow",t),t.defence-=8,$("#"+a.place+"Events").append("\n          <i class='fa fa-square event-item' style='color: yellow;' aria-hidden='true'></i> "+E+" mins: "+t.name+" booked<br/>"),t.status="yellow",t.fitness-=i(10)))}function u(e){var a=e.randomPlayer();if(i(101)%40==0)if(g("injury",a),$("#"+e.place+"Events").append("<i class='fa fa-plus' style='color: green;' aria-hidden='true'></i> "+E+" mins: "+a.name+" injured<br/>"),"away"===e.place&&A){a.playing=!a.playing,r(j,a);var t=j.randomSubstitute(a.position);t.playing=!t.playing,r(j,t)}else a.fitness=0+i(30),a.status="injured",a.playing=!1;else a.fitness-=i(15),a.defence-=i(10),a.attack-=i(10),g("nearMiss",a)}function m(e,a){var t=e.randomPlayerByPosition("midfielder"),s=a.randomPlayerByPosition("goalkeeper").defence+a.averagePlayerValues("defender");t.attack>s?(k(e),g("freekick",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='color:white;' aria-hidden='true'></i> "+E+" mins: "+t.name+" scored<br/>"),t.attack+=5):(g("wastedFreekick",t),t.creativity-=5,e.reduceValues(i(10),"attack",["striker","midfielder"]),e.reduceValues(i(10),"creativity",["striker","midfielder"]))}function f(e,a){var t=e.randomPlayerByPosition("striker"),s=a.randomPlayerByPosition("goalkeeper"),r=a.randomPlayerByPosition("defender");i(100)>25&&(r.status="yellow",$("#"+a.place+"Events").append("<i class='fa fa-square event-item' style='color: yellow;' aria-hidden='true'></i> "+E+" mins: "+r.name+" booked<br/>")),2*i(t.attack)>i(s.defence)?(k(e),g("penalty",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='color:white' aria-hidden='true'></i> "+E+" mins: "+t.name+" scores penalty<br/>"),t.attack+=5):(g("missedPenalty",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='color:red' aria-hidden='true'></i> "+E+" mins: "+t.name+" missed penalty<br/>"),s.defence+=10,t.attack-=10)}function y(e){var a=e.randomPlayer();i(a.discipline)+(100-E)<25&&(a.playing=!1,a.status="ejected",g("straightRed",a),$("#"+e.place+"Events").append("<i class='fa fa-square' style=' color: red;' aria-hidden='true'></i> "+E+" mins: "+a.name+" sent off<br/>"))}function h(e,a){if(null===M){switch($(".home-team  .team-name").text(a),a){case"Tottenham":M=spurs;break;case"Man United":M=manUnited;break;case"Liverpool":M=liverpool;break;case"Man City":M=manCity;break;case"Everton":M=everton;break;case"Chelsea":M=chelsea;break;case"Leicester":M=leicester;break;case"Arsenal":M=arsenal}M.place="home",$(".home-team-logo").attr("src","images/"+M.name+".png"),$(".home-team-logo").show(),$(".home-team, #homeBar").css("background-color",M.colors[0]),$(".home-team").css("color",M.colors[1])}else{switch($(".away-team .team-name").text(a),a){case"Tottenham":j=spurs;break;case"Man United":j=manUnited;break;case"Liverpool":j=liverpool;break;case"Man City":j=manCity;break;case"Everton":j=everton;break;case"Chelsea":j=chelsea;break;case"Leicester":j=leicester;break;case"Arsenal":j=arsenal}j.place="away",$(".away-team-logo").attr("src","images/"+j.name+".png"),$(".away-team-logo").show(),$(".logo-display span").show(),$(".away-team, .possession-bar").css("background-color",j.colors[0]),$(".away-team").css("color",j.colors[1])}}function g(e,a){var t={goal:["Goal!","He's scored!","That's a great finish!","What a goal by "+a.name,a.name+" finishes off the move!"],freekick:["It's a freekick",a.name+" to take the freekick","He lines up the freekick","This is a chance to get a cross in"],wastedFreekick:[a.name+" loses possession","That's ended up in row Z","The attack amounts to nothing",a.name+" has wasted that opportunity",a.name+"'s effort goes over the bar","He hands back possession to the other team"],yellow:["He's going in the book","Ouch! "+a.name+" will get a yellow for that","That's a booking","It's a yellow!","The ref is taking his name"],secondYellow:["He's already been booked...","That's a second yellow",a.name+" is shown a red!",a.name+" is off"],straightRed:[a.name+" is shown a straight red!",a.name+" is off","The ref has given him straight red!"],penalty:["The referee points to the spot","That's a penalty",a.name+" is fouled in the area","The ref blows his whistle. Penalty."],missedPenalty:["Saved!","It's over the bar",a.name+" has missed it!","Oh dear! "+a.name+"'s put it wide'"],injury:[a.name+"'s is going off",a.name+" is injured",a.name+" can't continue"],chance:["The ball is wasted","Possession is sloppily given away","That is wasted","The referee pulls back play","The ball goes out for a throw","Good interception!","He's robbed him of possesion","That was a wayward ball","He can't quite get on the end of that one"],nearMiss:[a.name+" is limping, but he'll be okay","That's a sore one.",a.name+" looks to be struggling","There's a nasty coming together","The referee waves play on"]},s=i(t[e].length),r=t[e][s];w.text(""+r)}function k(e){var a=null,t=null;"home"===e.place?(t=T.text(),a=parseFloat(t)+1,T.text(a)):(t=V.text(),a=parseFloat(t)+1,V.text(a))}function b(){var e=i(C.length)+1;return[C[e]]}var v=$(".changing-minutes"),w=$("#commentaryBox"),P=$(".primary-button"),T=$(".home-team .score"),V=$(".away-team .score"),x=null,E=0,F=!1,B=50,M=null,j=null,H=!1,A=!0,C=["goalkeeper","defender","midfielder","striker"],I=setInterval(function(){if(F){var e=i(100)+1;console.log(E+": "+e);var a=l(),t=_slicedToArray(a,2),s=t[0],h=t[1];if(c(s),e%17==0&&(d(s,h),s.increaseValues(i(5),"attack",["midfielder","striker"]),s.increaseValues(i(5),"creativity",["midfielder","striker"]),h.reduceValues(i(5),"defence",["midfielder","defender","goalkeeper"])),e%(i(30)+90)==0&&(f(s,h),h.reduceValues(i(10),"defence",["midfielder","defender","goalkeeper"])),e%90==0&&(y(h),h.reduceValues(25,"defence",["striker","midfielder","defender","goalkeeper"]),h.reduceValues(25,"attack",["striker","midfielder","defender","goalkeeper"]),h.reduceValues(25,"creativity",["striker","midfielder","defender","goalkeeper"])),e%22==0&&(m(s,h),s.increaseValues(5,"attack",["midfielder","striker"]),s.increaseValues(5,"creativity",["midfielder","striker"])),e%18==0&&p(s,h),e%25==0&&(u(s),h.reduceValues(3,"creativity",["striker","midfielder","defender","goalkeeper"])),A&&e%10==0&&j.subs<6&&E>50){var g=b(),k=_slicedToArray(g,1),v=k[0],w=j.randomPlayerByPosition(v,"subbed-on"),$=j.randomSubstitute(v);w&&$&&(w.playing=!w.playing,r(j,w),$.playing=!$.playing,r(j,$))}b(),h.reduceValues(i(10),"fitness",[b]),o(),n()}},50);$(".team-input").on("click",function(e){var a=e.target.innerHTML;null===M?(h(M,a),$(".title-message").text("Home team selected. Chose your opponent."),$(e.target).attr("disabled",!0),$("#homeTeam").attr("disabled",!1)):(h(j,a),$(".title-message").text("Opponent selected. Edit tactics or proceed."),$(".primary-button, #awayTeam").attr("disabled",!1))}),$("#playerMode").on("click",function(){A=!A}),$(".team-panel").on("click",function(e){var a=e.target.id;s(x,a)}),P.on("click",function(){F=!F,$("#match-setup, .info-message, .team-setup, .game-logo").hide(),$("#match-engine, .away-team, .home-team, .timer, .button-bar").show(),F?(P.text("Pause"),H=!0):P.text("Play")}),$("#homeTeam").on("click",function(){e(M)}),$("#awayTeam").on("click",function(){e(j)}),$(".go-back").on("click",function(){$(".team-setup").hide(),$(".match-setup").show()}),$(".formation").on("change",function(e){var a=e.target.value;x.formation=a,t(x)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
