"use strict";var _slicedToArray=function(){function e(e,a){var t=[],s=!0,n=!1,r=void 0;try{for(var i,o=e[Symbol.iterator]();!(s=(i=o.next()).done)&&(t.push(i.value),!a||t.length!==a);s=!0);}catch(e){n=!0,r=e}finally{try{!s&&o.return&&o.return()}finally{if(n)throw r}}return t}return function(a,t){if(Array.isArray(a))return a;if(Symbol.iterator in Object(a))return e(a,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();$(function(){function e(e){$(".team-panel").html(""),$(".formation").val(e.formation),e.players.sort(function(e,a){return B.indexOf(e.position)<B.indexOf(a.position)?-1:1});for(var a=0;a<e.players.length;a++){var t=e.players[a],s=t.playing?"&#10004;":"&#10007;";$(".team-panel").append('<p class="player-line '+t.position+" "+t.status+"\" id='"+t.name+"'>\n          <span class=\"starting "+t.status+'" id="'+a+'">'+s+'</span>\n          <span class="player-position ">'+t.position+'</span>\n          <span class="player-name">'+t.name+'</span>\n          <span class="player-stat">'+t.attack+'</span>\n          <span class="player-stat">'+t.defence+'</span>\n          <span class="player-stat">'+t.creativity+'</span>\n          <span class="player-stat">'+t.defence+'</span>\n          <span class="player-stat">'+t.fitness+"</span>\n        </p>")}}function a(e){$(".team-display").html("");var a=["1"].concat(e.formation.split("-")),t=0,s=0;try{a.map(function(a){for(var n=parseFloat(a),r=0;r<n;){if(e.players[t].playing||"ejected"===e.players[t].status){var i=B[s]!==e.players[t].position?"warning":"";$(".team-display").append("<span class='player-block "+i+" "+e.players[t].status+"'>"+e.players[t].name+"</span>"),e.players[t].chosenPosition=B[s],r++}t++}$(".team-display").append('<div class="seperate-players">'),s++})}catch(e){$(".team-display").append("<p class='team-selection-warning seperate-players'>Less than 11 players selected!</p>")}}function t(e,t){if(e.players[t].playing=!e.players[t].playing,a(x),e.players[t].playing){if($("#"+t).html("&#10004;"),z){console.log("clicked"),$("#"+t).parent().css({background:"green"});var n=e.players[t];s(e,n)}}else if($("#"+t).html("&#10007;"),z){$("#"+t).parent().css({"pointer-events":"none",background:"red"});var r=e.players[t];s(e,r)}}function s(e,a){e.subs<7?a.playing?($("#"+e.place+"Events").append("<i class='fa fa-arrow-right' style='font-size: 22px; color:green; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+a.name+" substituted<br/>"),e.subs+=1,a.playing=!0,a.status="subbed-on"):($("#"+e.place+"Events").append("<i class='fa fa-arrow-right' style='font-size: 22px; color:red; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+a.name+" substituted<br/>"),e.subs+=1,a.playing=!1,a.status="subbed-off"):console.log("You have had 3 subs!")}function n(){44===P&&(k.text("That's half-time!"),T=!T,v.text("Play")),90===P?(k.text("That's full-time!"),clearInterval(j),v.text("Finish")):(P++,g.text(P))}function r(e){return Math.floor(Math.random()*e)}function i(){var e=document.getElementById("homeBar");V=E.averagePlayerValues("creativity")/(E.averagePlayerValues("creativity")+F.averagePlayerValues("creativity"))*100+(Math.random()<.5?-r(6):r(6)),e.style.width=V+"%"}function o(){return r(E.averagePlayerValues("creativity")+E.averagePlayerValues("fitness"))>=r(F.averagePlayerValues("creativity")+F.averagePlayerValues("fitness"))?(k.css("background-color",E.colors[0]),k.css("color",E.colors[1]),r(20)%4==0&&(k.text(y("chance","")),E.increaseValues(3,"attack",["midfielder","striker"]),E.increaseValues(3,"creativity",["midfielder","striker"])),[E,F]):(k.css("background-color",F.colors[0]),k.css("color",F.colors[1]),r(20)%4==0&&(F.increaseValues(3,"attack",["midfielder","striker"]),F.increaseValues(3,"creativity",["midfielder","striker"]),k.text(y("chance",""))),[F,E])}function l(e,a){var t=e.randomPlayer(),s=a.randomPlayerByPosition("defender");r(t.attack)>r(s.defence)&&(y("goal",t),h(e),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='font-size: 22px; color:white; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" scored<br/>"))}function c(e,a){var t=a.randomPlayer();r(t.discipline)+(100-P)<90&&"ejected"!==t.status&&("yellow"===t.status?(k.css("background-color","#FF0000"),k.css("color","#FFFFFF"),a.reduceValues(10,"defence",["striker","midfielder","defender","goalkeeper"]),a.reduceValues(25,"attack",["striker","midfielder","defender","goalkeeper"]),a.reduceValues(25,"creativity",["striker","midfielder","defender","goalkeeper"]),y("secondYellow",t),$("#"+a.place+"Events").append("<i class='fa fa-square event-item' style='font-size: 24px; color: red; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" sent off<br/>"),t.status="ejected",t.playing=!1):(k.css("background-color","yellow"),k.css("color","#000000"),y("yellow",t),t.defence-=8,$("#"+a.place+"Events").append("\n          <i class='fa fa-square event-item' style='font-size: 24px; color: yellow; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" booked<br/>"),t.status="yellow",t.fitness-=r(5)))}function d(e){var a=e.randomPlayer();if(r(101)%40==0)if(y("injury",a),$("#"+e.place+"Events").append("<i class='fa fa-plus' style='font-size: 26px; color: green; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+a.name+" injured<br/>"),"away"===e.place){a.playing=!a.playing,s(F,a);var t=F.randomSubstitute(a.position);t.playing=!t.playing,s(F,t)}else"home"===e.place&&(a.fitness=0+r(30),a.status="injured",a.playing=!1);else a.fitness-=r(15),a.defence-=r(10),a.attack-=r(10),y("nearMiss",a)}function p(e,a){var t=e.randomPlayerByPosition("midfielder"),s=a.randomPlayerByPosition("goalkeeper").defence+a.averagePlayerValues("defender");t.attack>s?(h(e),y("freekick",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='font-size: 22px; color:white; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" scored<br/>"),t.attack+=5):(y("wastedFreekick",t),t.creativity-=5,e.reduceValues(r(10),"attack",["striker","midfielder"]),e.reduceValues(r(10),"creativity",["striker","midfielder"]))}function u(e,a){var t=e.randomPlayerByPosition("striker"),s=a.randomPlayerByPosition("goalkeeper"),n=a.randomPlayerByPosition("defender");r(100)>25&&(n.status="yellow",$("#"+a.place+"Events").append("<i class='fa fa-square event-item' style='font-size: 24px; color: yellow; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+n.name+" booked<br/>")),2*r(t.attack)>r(s.defence)?(h(e),y("penalty",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='font-size: 22px; color:white; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" scores penalty<br/>"),t.attack+=5):(y("missedPenalty",t),$("#"+e.place+"Events").append("<i class='fa fa-futbol-o' style='font-size: 22px; color:red; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+t.name+" missed penalty<br/>"),s.defence+=10,t.attack-=10)}function f(e){var a=e.randomPlayer();r(a.discipline)+(100-P)<25&&(a.playing=!1,a.status="ejected",y("straightRed",a),$("#"+e.place+"Events").append("<i class='fa fa-square' style='font-size: 24px; color: red; padding-top:5px' aria-hidden='true'></i> "+P+" mins: "+a.name+" sent off<br/>"))}function m(e,a){if(null===E){switch($(".home-team  .team-name").text(a),a){case"Tottenham":E=spurs;break;case"Man United":E=manUnited;break;case"Liverpool":E=liverpool;break;case"Man City":E=manCity;break;case"Everton":E=everton;break;case"Chelsea":E=chelsea;break;case"Leicester":E=leicester;break;case"Arsenal":E=arsenal}E.place="home",$(".home-team, #homeBar").css("background-color",E.colors[0]),$(".home-team").css("color",E.colors[1])}else{switch($(".away-team .team-name").text(a),a){case"Tottenham":F=spurs;break;case"Man United":F=manUnited;break;case"Liverpool":F=liverpool;break;case"Man City":F=manCity;break;case"Everton":F=everton;break;case"Chelsea":F=chelsea;break;case"Leicester":F=leicester;break;case"Arsenal":F=arsenal}F.place="away",$(".away-team, .possession-bar").css("background-color",F.colors[0]),$(".away-team").css("color",F.colors[1])}}function y(e,a){var t={goal:["Goal!","He's scored!","That's a great finish!","What a goal by "+a.name,a.name+" finishes off the move!"],freekick:["It's a freekick",a.name+" to take the freekick","He lines up the freekick","This is a chance to get a cross in"],wastedFreekick:[a.name+" loses possession","That's ended up in row Z","The attack amounts to nothing",a.name+" has wasted that opportunity",a.name+"'s effort goes over the bar","He hands back possession to the other team"],yellow:["He's going in the book","Ouch! "+a.name+" will get a yellow for that","That's a booking","It's a yellow!","The ref is taking his name"],secondYellow:["He's already been booked...","That's a second yellow",a.name+" is shown a red!",a.name+" is off"],straightRed:[a.name+" is shown a straight red!",a.name+" is off","The ref has given him straight red!"],penalty:["The referee points to the spot","That's a penalty",a.name+" is fouled in the area","The ref blows his whistle. Penalty."],missedPenalty:["Saved!","It's over the bar",a.name+" has missed it!","Oh dear! "+a.name+"'s put it wide'"],injury:[a.name+"'s is going off",a.name+" is injured",a.name+" can't continue"],chance:["The ball is wasted","Possession is sloppily given away","That is wasted","The referee pulls back play","The ball goes out for a throw","Good interception!","He's robbed him of possesion","That was a wayward ball","He can't quite get on the end of that one"],nearMiss:[a.name+" is limping, but he'll be okay","That's a sore one.",a.name+" looks to be struggling","There's a nasty coming together","The referee waves play on"]},s=r(t[e].length),n=t[e][s];k.text(""+n)}function h(e){var a=null,t=null;"home"===e.place?(t=b.text(),a=parseFloat(t)+1,b.text(a)):(t=w.text(),a=parseFloat(t)+1,w.text(a))}var g=$(".changing-minutes"),k=$("#commentaryBox"),v=$(".primary-button"),b=$(".home-team .score"),w=$(".away-team .score"),x=null,P=0,T=!1,V=50,E=null,F=null,z=!1,B=["goalkeeper","defender","midfielder","striker"],j=setInterval(function(){if(T){var e=r(100)+1;console.log(P+": "+e);var a=o(),t=_slicedToArray(a,2),m=t[0],y=t[1];if(e%17==0&&(l(m,y),m.increaseValues(5,"attack",["midfielder","striker"]),m.increaseValues(5,"creativity",["midfielder","striker"]),y.reduceValues(5,"defence",["midfielder","defender","goalkeeper"])),e%(r(30)+90)==0&&(u(m,y),y.reduceValues(3,"defence",["midfielder","defender","goalkeeper"])),e%90==0&&(f(y),y.reduceValues(25,"defence",["striker","midfielder","defender","goalkeeper"]),y.reduceValues(25,"attack",["striker","midfielder","defender","goalkeeper"]),y.reduceValues(25,"creativity",["striker","midfielder","defender","goalkeeper"])),e%22==0&&(p(m,y),m.increaseValues(5,"attack",["midfielder","striker"]),m.increaseValues(5,"creativity",["midfielder","striker"])),e%18==0&&c(m,y),e%25==0&&(d(m),y.reduceValues(3,"creativity",["striker","midfielder","defender","goalkeeper"])),e%10==0&&F.subs<6&&P>50){var h=r(B.length)+1,g=B[h];if(B[h]){var k=F.randomPlayerByPosition(g,"subbed-on");k.playing=!k.playing,s(F,k);var v=F.randomSubstitute(g);v.playing=!v.playing,s(F,v)}}var b=r(B.length)+1,w=B[b];y.reduceValues(r(10),"fitness",[w]),i(),n()}},10);$(".team-input").on("click",function(e){var a=e.target.innerHTML;null===E?(m(E,a),$(".title-message").text("Home team chosen. Now chose your opponent.")):(m(F,a),$(".title-message").text("Opponent selected. Now edit tactics or proceed to match."))}),$(".team-panel").on("click",function(e){var a=e.target.id;t(x,a)}),v.on("click",function(){T=!T,$("#match-setup, .info-message, .team-setup").hide(),$("#match-engine, .away-team, .home-team, .timer").show(),T?(v.text("Pause"),z=!0):v.text("Play")}),$("#homeTeam").on("click",function(){T&&(T=!T),v.text("Play"),$(".match-setup, .match-engine").hide(),$(".team-setup").show(),e(E),x=E,a(x)}),$("#awayTeam").on("click",function(){T&&(T=!T),v.text("Play"),$(".match-setup, .match-engine").hide(),$(".team-setup").show(),e(F),x=F,a(x)}),$(".go-back").on("click",function(){$(".team-setup").hide(),$(".match-setup").show()}),$(".formation").on("change",function(e){var t=e.target.value;x.formation=t,a(x)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwibmV3Rm9ybWF0aW9uIiwiZSIsInRlYW1UYWN0aWNzIiwiZm9ybWF0aW9uIiwicmV2ZWFsVGVhbSIsInRlYW1PYmplY3QiLCJzZXR1cFRhY3RpY3MiLCJzb3J0IiwiYSIsImIiLCJwb3NpdGlvbnMiLCJodG1sIiwicG9zaXRpb24iLCJpbmRleE9mIiwiaSIsInBsYXllcnMiLCJsZW5ndGgiLCJzdGFydGluZ0VsZXZlbiIsInBsYXllciIsInBsYXlpbmciLCJhcHBlbmQiLCJzdGF0dXMiLCJuYW1lIiwiYXR0YWNrIiwiZGVmZW5jZSIsImNyZWF0aXZpdHkiLCJmaXRuZXNzIiwiaXRlcmF0aW9ucyIsInBhcnNlRmxvYXQiLCJzcGxpdCIsInBsYXllck51bWJlciIsInBvc2l0aW9uTnVtYmVyIiwid2FybmluZ01lc3NhZ2UiLCJhcnJheUl0ZW0iLCJlcnIiLCJjaG9zZW5Qb3NpdGlvbiIsInNlbGVjdGVkUGxheWVyIiwiY2hvb3NlUGxheWVycyIsImNzcyIsInN1YnN0aXR1dGUiLCJwbGF5ZXJPZmYiLCJjb25zb2xlIiwibG9nIiwicGFyZW50IiwiYmFja2dyb3VuZCIsInBsYXllck9uIiwicG9pbnRlci1ldmVudHMiLCJzdWJzIiwidGltZUNvbnRyb2wiLCJwbGFjZSIsIm1hdGNoVGltZSIsIiRjb21tZW50YXJ5Qm94IiwidGV4dCIsIiRtYXRjaFRpbWUiLCJydW4iLCJnZW5SYW5kb21WYWx1ZSIsIiRwcmltYXJ5QnV0dG9uIiwiTWF0aCIsImNsZWFySW50ZXJ2YWwiLCJkb2N1bWVudCIsIndpZHRoIiwiaG9tZVRlYW0iLCJhdmVyYWdlUGxheWVyVmFsdWVzIiwic2VsZWN0VGVhbSIsInZhbHVlIiwiZmxvb3IiLCJyYW5kb20iLCJob21lUmFuZG9tIiwiZWxlbSIsImdldEVsZW1lbnRCeUlkIiwiY29sb3JzIiwiYXdheVRlYW0iLCJzdHlsZSIsImdlbmVyYXRlQ29tbWVudGFyeSIsImluY3JlYXNlVmFsdWVzIiwiYXR0YWNraW5nVGVhbSIsImRlZmVuZGluZ1RlYW0iLCJhdHRhY2tpbmdQbGF5ZXIiLCJyYW5kb21QbGF5ZXIiLCJkZWZlbmRpbmdQbGF5ZXIiLCJyYW5kb21QbGF5ZXJCeVBvc2l0aW9uIiwiZ29hbENoYW5jZSIsInVwZGF0ZVNjb3JlIiwicmVkdWNlVmFsdWVzIiwiZGlzY2lwbGluZSIsImhhbmRsZUluanVyeSIsImFkZFBsYXllciIsImhhbmRsZUZyZWVraWNrIiwiZGVmZW5kaW5nVmFsdWUiLCJib29rZWRQbGF5ZXIiLCJ0ZWFtIiwic2VsZWN0b3IiLCJtYW5Vbml0ZWQiLCJsaXZlcnBvb2wiLCJjb25maWdUZWFtIiwibGVpY2VzdGVyIiwic3B1cnMiLCJtYW5DaXR5IiwiZXZlcnRvbiIsImNoZWxzZWEiLCJjb21tZW50YXJ5IiwiZ29hbCIsImZyZWVraWNrIiwid2FzdGVkRnJlZWtpY2siLCJ5ZWxsb3ciLCJzZWNvbmRZZWxsb3ciLCJzdHJhaWdodFJlZCIsInBlbmFsdHkiLCJtaXNzZWRQZW5hbHR5IiwiaW5qdXJ5IiwiY2hhbmNlIiwibmVhck1pc3MiLCJhcnNlbmFsIiwic2NlbmFyaW8iLCJnZXRTY29yZSIsInNjb3JlIiwiJGhvbWVTY29yZSIsIiRhd2F5U2NvcmUiLCJyYW5kb21JbmRleCIsIm1lc3NhZ2UiLCJzZXRJbnRlcnZhbCIsInRpbWVySUQiLCJldmVudFZhbHVlIiwiX3NlbGVjdFRlYW0iLCJfc2VsZWN0VGVhbTIiLCJfc2xpY2VkVG9BcnJheSIsImhhbmRsZVBlbmFsdHkiLCJoYW5kbGVEaXNjaXBsaW5lIiwicmVtb3ZlUGxheWVyIiwicmFuZG9tUG9zaXRpb24iLCJtb3ZlIiwidXNlclRlYW0iLCJ0YXJnZXQiLCJpbm5lckhUTUwiLCJvbiIsImlkIiwiaGlkZSIsInNob3ciLCJnYW1lU3RhcnRlZCJdLCJtYXBwaW5ncyI6Im1jQUFBQSxHQUFFLFdBd0tFLFFBQU1DLEdBQWVDLEdBQ3JCQyxFQUFBQSxlQUFZQyxLQUFaLElBQ0FDLEVBQUFBLGNBQVdGLElBQUFBLEVBQVhDLFdBR0ZF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QUFBLDRDQUFrQ3lJLE9BQ2xDekksRUFBQSxpREFBQTBJLE9BQ0FwRyxHQUZGbUIsRUFBQUosS0FBQSxTQVdJc0YsR0FBYyxHQUxoQnBGLEVBQUFGLEtBQUEsVUFLRXNGLEVBQUFBLGFBQUFBLEdBQWMsUUFBZCxXQUZGcEYsSUFJRUUsR0FBQUEsR0FLRkEsRUFBRkosS0FBa0IsUUFDaEJyRCxFQUFBLCtCQUFTeUksT0FDUGxGLEVBQUFBLGVBQUFtRixPQUNEbkksRUFBQXVELEdBT0QzRCxFQUFjMkQsRUFMZHpELEVBQUFGLEtBSUFJLEVBQUFBLGFBQWF1RCxHQUFBQSxRQUFiLFdBQ0EzRCxJQUNBRSxHQUFBQSxHQVFBb0QsRUFBZUosS0FBSyxRQUpwQnJELEVBQUEsK0JBQXlCeUksT0FDekJ6SSxFQUFBLGVBQVMwSSxPQUNQbkYsRUFBQWlCLEdBQ0RyRSxFQUFBcUUsRUFDRGYsRUFBQUEsS0FHQWxELEVBQUFBLFlBQUFBLEdBQWFpRSxRQUFiLFdBQ0FyRSxFQUFBQSxlQUFjcUUsT0FDZG5FLEVBQUFBLGdCQUFXRixTQUdiSCxFQUFFLGNBQUZ1SSxHQUFpQixTQUFTLFNBQUFySSxHQUN4QkYsR0FBRUMsR0FBRkMsRUFBQW1JLE9BQUFwRSxLQUNBakUsR0FBRUksVUFBRkgsRUFGRkksRUFBQUYiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJCgoKSA9PiB7XG4gIGNvbnN0ICRtYXRjaFRpbWUgPSAkKCcuY2hhbmdpbmctbWludXRlcycpO1xuICBjb25zdCAkY29tbWVudGFyeUJveCA9ICQoJyNjb21tZW50YXJ5Qm94Jyk7XG4gIGNvbnN0ICRwcmltYXJ5QnV0dG9uID0gJCgnLnByaW1hcnktYnV0dG9uJyk7XG4gIGNvbnN0ICRob21lU2NvcmUgPSAkKCcuaG9tZS10ZWFtIC5zY29yZScpO1xuICBjb25zdCAkYXdheVNjb3JlID0gJCgnLmF3YXktdGVhbSAuc2NvcmUnKTtcblxuICBsZXQgdGVhbVRhY3RpY3MgPSBudWxsO1xuICBsZXQgbWF0Y2hUaW1lID0gMDtcbiAgbGV0IHJ1biA9IGZhbHNlO1xuICBsZXQgd2lkdGggPSA1MDtcbiAgbGV0IGhvbWVUZWFtID0gbnVsbDtcbiAgbGV0IGF3YXlUZWFtID0gbnVsbDtcbiAgbGV0IGdhbWVTdGFydGVkID0gZmFsc2U7XG4gIGNvbnN0IHBvc2l0aW9ucyA9IFsnZ29hbGtlZXBlcicsICdkZWZlbmRlcicsICdtaWRmaWVsZGVyJywgJ3N0cmlrZXInXTtcblxuICAvLyBNQVRDSCBMT0dJQ1xuXG4gIGNvbnN0IHRpbWVySUQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblxuICAgIGlmIChydW4pIHtcblxuICAgICAgY29uc3QgZXZlbnRWYWx1ZSA9IGdlblJhbmRvbVZhbHVlKDEwMCkgKyAxO1xuICAgICAgY29uc29sZS5sb2coYCR7bWF0Y2hUaW1lfTogJHtldmVudFZhbHVlfWApO1xuXG4gICAgICAvLyBSYW5kb20oQXZlcmFnZSBUZWFtIENyZWF0aXZpdHkpICsgRml0bmVzcyA9PiBIaWdoZXIgc2NvcmUgZGV0ZXJtaW5lcyB0aGUgYXR0YWNraW5nIHRlYW1cbiAgICAgIGNvbnN0IFthdHRhY2tpbmdUZWFtLCBkZWZlbmRpbmdUZWFtXSA9IHNlbGVjdFRlYW0oKTtcblxuICAgICAgaWYgKGV2ZW50VmFsdWUgJSAxNyA9PT0gMCkge1xuICAgICAgICAvLyBSYW5kb20gKFN0cmlrZXIsIE1pZGZpZWxkZXIpIHZzLiBHb2Fsa2VlcGVyID4gUmFuZFRoZWlyQXR0YWNrIHZzLiBSYW5kR29hbGtlZXBlclxuICAgICAgICBnb2FsQ2hhbmNlKGF0dGFja2luZ1RlYW0sIGRlZmVuZGluZ1RlYW0pO1xuICAgICAgICBhdHRhY2tpbmdUZWFtLmluY3JlYXNlVmFsdWVzKDUsJ2F0dGFjaycsWydtaWRmaWVsZGVyJywgJ3N0cmlrZXInXSk7XG4gICAgICAgIGF0dGFja2luZ1RlYW0uaW5jcmVhc2VWYWx1ZXMoNSwnY3JlYXRpdml0eScsWydtaWRmaWVsZGVyJywgJ3N0cmlrZXInXSk7XG4gICAgICAgIGRlZmVuZGluZ1RlYW0ucmVkdWNlVmFsdWVzKDUsJ2RlZmVuY2UnLFsnbWlkZmllbGRlcicsICdkZWZlbmRlcicsICdnb2Fsa2VlcGVyJ10pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnRWYWx1ZSAlIChnZW5SYW5kb21WYWx1ZSgzMCkgKyA5MCkgPT09IDApIHtcbiAgICAgICAgLy8gU3RyaWtlciB2cy4gR29hbGtlZXBlciA+IFJhbmRUaGVpckF0dGFjayB2cy4gUmFuZEdvYWxrZWVwZXJQZW5hbHR5XG4gICAgICAgIGhhbmRsZVBlbmFsdHkoYXR0YWNraW5nVGVhbSwgZGVmZW5kaW5nVGVhbSk7XG4gICAgICAgIGRlZmVuZGluZ1RlYW0ucmVkdWNlVmFsdWVzKDMsJ2RlZmVuY2UnLFsnbWlkZmllbGRlcicsICdkZWZlbmRlcicsICdnb2Fsa2VlcGVyJ10pO1xuICAgICAgfVxuICAgICAgLy9cbiAgICAgIGlmIChldmVudFZhbHVlICUgOTAgPT09IDApIHtcbiAgICAgICAgLy8gUmFuZG9tIFBsYXllciA9PiBEaXNjaXBsaW5lID4gcmFuZG9tXG4gICAgICAgIHN0cmFpZ2h0UmVkKGRlZmVuZGluZ1RlYW0pO1xuICAgICAgICBkZWZlbmRpbmdUZWFtLnJlZHVjZVZhbHVlcygyNSwnZGVmZW5jZScsWydzdHJpa2VyJywnbWlkZmllbGRlcicsICdkZWZlbmRlcicsICdnb2Fsa2VlcGVyJ10pO1xuICAgICAgICBkZWZlbmRpbmdUZWFtLnJlZHVjZVZhbHVlcygyNSwnYXR0YWNrJyxbJ3N0cmlrZXInLCdtaWRmaWVsZGVyJywgJ2RlZmVuZGVyJywgJ2dvYWxrZWVwZXInXSk7XG4gICAgICAgIGRlZmVuZGluZ1RlYW0ucmVkdWNlVmFsdWVzKDI1LCdjcmVhdGl2aXR5JyxbJ3N0cmlrZXInLCdtaWRmaWVsZGVyJywgJ2RlZmVuZGVyJywgJ2dvYWxrZWVwZXInXSk7XG4gICAgICB9XG4gICAgICAvL1xuICAgICAgaWYgKGV2ZW50VmFsdWUgJSAyMiA9PT0gMCkge1xuICAgICAgICAvLyBTdHJpa2VyIHZzLiBHb2Fsa2VlcGVyID4gUmFuZFRoZWlyRnJlZWtpY2sgdnMuIFJhbmRHb2Fsa2VlcGVyUGVuYWx0eVxuICAgICAgICBoYW5kbGVGcmVla2ljayhhdHRhY2tpbmdUZWFtLCBkZWZlbmRpbmdUZWFtKTtcbiAgICAgICAgYXR0YWNraW5nVGVhbS5pbmNyZWFzZVZhbHVlcyg1LCdhdHRhY2snLFsnbWlkZmllbGRlcicsICdzdHJpa2VyJ10pO1xuICAgICAgICBhdHRhY2tpbmdUZWFtLmluY3JlYXNlVmFsdWVzKDUsJ2NyZWF0aXZpdHknLFsnbWlkZmllbGRlcicsICdzdHJpa2VyJ10pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnRWYWx1ZSAlIDE4ID09PSAwKSB7XG4gICAgICAgIC8vIFJhbmRvbVBsYXllciA9PiBkaXNjaXBsaW5lICsgbWF0Y2h0aW1lIHJhbmQgdnMuIHJhbmRvbVxuICAgICAgICBoYW5kbGVEaXNjaXBsaW5lKGF0dGFja2luZ1RlYW0sIGRlZmVuZGluZ1RlYW0pO1xuXG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudFZhbHVlICUgMjUgPT09IDApIHtcbiAgICAgICAgaGFuZGxlSW5qdXJ5KGF0dGFja2luZ1RlYW0pO1xuICAgICAgICBkZWZlbmRpbmdUZWFtLnJlZHVjZVZhbHVlcygzLCdjcmVhdGl2aXR5JyxbJ3N0cmlrZXInLCdtaWRmaWVsZGVyJywgJ2RlZmVuZGVyJywgJ2dvYWxrZWVwZXInXSk7XG4gICAgICB9XG5cbiAgICAgIGlmKHRydWUpIHtcbiAgICAgICAgaWYgKGV2ZW50VmFsdWUgJSAxMCA9PT0gMCAmJiBhd2F5VGVhbS5zdWJzIDwgNiAmJiBtYXRjaFRpbWUgPiA1MCkge1xuICAgICAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gZ2VuUmFuZG9tVmFsdWUocG9zaXRpb25zLmxlbmd0aCkgKyAxO1xuICAgICAgICAgIGNvbnN0IHJhbmRvbVBvc2l0aW9uID0gcG9zaXRpb25zW3JhbmRvbUluZGV4XTtcblxuICAgICAgICAgIGlmIChwb3NpdGlvbnNbcmFuZG9tSW5kZXhdKSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVQbGF5ZXIgPSBhd2F5VGVhbS5yYW5kb21QbGF5ZXJCeVBvc2l0aW9uKHJhbmRvbVBvc2l0aW9uLCAnc3ViYmVkLW9uJyk7XG4gICAgICAgICAgICByZW1vdmVQbGF5ZXIucGxheWluZyA9ICFyZW1vdmVQbGF5ZXIucGxheWluZztcbiAgICAgICAgICAgIHN1YnN0aXR1dGUoYXdheVRlYW0sIHJlbW92ZVBsYXllcik7XG4gICAgICAgICAgICBjb25zdCBhZGRQbGF5ZXIgPSBhd2F5VGVhbS5yYW5kb21TdWJzdGl0dXRlKHJhbmRvbVBvc2l0aW9uKTtcbiAgICAgICAgICAgIGFkZFBsYXllci5wbGF5aW5nID0gIWFkZFBsYXllci5wbGF5aW5nO1xuICAgICAgICAgICAgc3Vic3RpdHV0ZShhd2F5VGVhbSwgYWRkUGxheWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVkdWNlIGZpdG5lc3Mgb2YgcGxheWVycyBpbiBhIHJhbmRvbSBwb3NpdGlvblxuICAgICAgaWYgKHRydWUpIHtcbiAgICAgICAgY29uc3QgcmFuZG9tSW5kZXggPSBnZW5SYW5kb21WYWx1ZShwb3NpdGlvbnMubGVuZ3RoKSArIDE7XG4gICAgICAgIGNvbnN0IHJhbmRvbVBvc2l0aW9uID0gcG9zaXRpb25zW3JhbmRvbUluZGV4XTtcbiAgICAgICAgZGVmZW5kaW5nVGVhbS5yZWR1Y2VWYWx1ZXMoZ2VuUmFuZG9tVmFsdWUoMTApLCdmaXRuZXNzJyxbcmFuZG9tUG9zaXRpb25dKTtcbiAgICAgIH1cbiAgICAgIC8vIE1vdmUgdGhlIHBvc3Nlc3Npb24gYmFyXG4gICAgICBtb3ZlKCk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgdGltZXJcbiAgICAgIHRpbWVDb250cm9sKCk7XG4gICAgfVxuICB9LDEwKTtcblxuICAvLyBFdmVudCBMaXN0ZW5lcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRlYW0gc2VsZWN0aW9uXG4gICQoJy50ZWFtLWlucHV0Jykub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICAvLyBSRUZBQ1RPUjogbWFrZSBzZWxlY3RvcnMgaW4gJHZhcmlhYmxlcywgdHVybiBjbGljayBpbnRvIG5hbWVkIGZ1bmN0aW9uXG4gICAgY29uc3QgdXNlclRlYW0gPSBlLnRhcmdldC5pbm5lckhUTUw7XG4gICAgaWYgKGhvbWVUZWFtID09PSBudWxsKSB7XG4gICAgICBjb25maWdUZWFtKGhvbWVUZWFtLCB1c2VyVGVhbSk7XG4gICAgICAkKCcudGl0bGUtbWVzc2FnZScpLnRleHQoJ0hvbWUgdGVhbSBjaG9zZW4uIE5vdyBjaG9zZSB5b3VyIG9wcG9uZW50LicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWdUZWFtKGF3YXlUZWFtLCB1c2VyVGVhbSk7XG4gICAgICAkKCcudGl0bGUtbWVzc2FnZScpLnRleHQoJ09wcG9uZW50IHNlbGVjdGVkLiBOb3cgZWRpdCB0YWN0aWNzIG9yIHByb2NlZWQgdG8gbWF0Y2guJyk7XG4gICAgfVxuICB9KTtcblxuICAvLyBTdGFydGluZyBMaW5lIFVwXG4gIC8vICQoJyNyZXZlYWxUZWFtJykub24oJ2NsaWNrJywgcmV2ZWFsVGVhbSk7XG5cbiAgLy8gVG9nZ2xlIHllcy9ubyBwbGF5aW5nXG4gICQoJy50ZWFtLXBhbmVsJykub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZFBsYXllciA9IGUudGFyZ2V0LmlkO1xuICAgIGNob29zZVBsYXllcnModGVhbVRhY3RpY3MsIHNlbGVjdGVkUGxheWVyKTtcbiAgfSk7XG5cbiAgJHByaW1hcnlCdXR0b24ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgIHJ1biA9ICFydW47XG4gICAgJCgnI21hdGNoLXNldHVwLCAuaW5mby1tZXNzYWdlLCAudGVhbS1zZXR1cCcpLmhpZGUoKTtcbiAgICAkKCcjbWF0Y2gtZW5naW5lLCAuYXdheS10ZWFtLCAuaG9tZS10ZWFtLCAudGltZXInKS5zaG93KCk7XG4gICAgaWYgKHJ1bikge1xuICAgICAgJHByaW1hcnlCdXR0b24udGV4dCgnUGF1c2UnKTtcbiAgICAgIGdhbWVTdGFydGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHByaW1hcnlCdXR0b24udGV4dCgnUGxheScpO1xuICAgIH1cblxuICB9KTtcblxuICAkKCcjaG9tZVRlYW0nKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKHJ1bikge1xuICAgICAgcnVuID0gIXJ1bjtcbiAgICB9XG5cbiAgICAvLyBGdW5jdGlvbnNcbiAgICAkcHJpbWFyeUJ1dHRvbi50ZXh0KCdQbGF5Jyk7XG4gICAgJCgnLm1hdGNoLXNldHVwLCAubWF0Y2gtZW5naW5lJykuaGlkZSgpO1xuICAgICQoJy50ZWFtLXNldHVwJykuc2hvdygpO1xuICAgIHNldHVwVGFjdGljcyhob21lVGVhbSk7XG4gICAgdGVhbVRhY3RpY3MgPSBob21lVGVhbTtcbiAgICByZXZlYWxUZWFtKHRlYW1UYWN0aWNzKTtcblxuICB9KTtcblxuICAkKCcjYXdheVRlYW0nKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKHJ1bikge1xuICAgICAgcnVuID0gIXJ1bjtcbiAgICB9XG4gICAgJHByaW1hcnlCdXR0b24udGV4dCgnUGxheScpO1xuICAgICQoJy5tYXRjaC1zZXR1cCwgLm1hdGNoLWVuZ2luZScpLmhpZGUoKTtcbiAgICAkKCcudGVhbS1zZXR1cCcpLnNob3coKTtcbiAgICBzZXR1cFRhY3RpY3MoYXdheVRlYW0pO1xuICAgIHRlYW1UYWN0aWNzID0gYXdheVRlYW07XG4gICAgcmV2ZWFsVGVhbSh0ZWFtVGFjdGljcyk7XG4gIH0pO1xuXG4gICQoJy5nby1iYWNrJykub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICQoJy50ZWFtLXNldHVwJykuaGlkZSgpO1xuICAgICQoJy5tYXRjaC1zZXR1cCcpLnNob3coKTtcbiAgfSk7XG5cbiAgJCgnLmZvcm1hdGlvbicpLm9uKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgIGNvbnN0IG5ld0Zvcm1hdGlvbiA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIHRlYW1UYWN0aWNzLmZvcm1hdGlvbiA9IG5ld0Zvcm1hdGlvbjtcbiAgICByZXZlYWxUZWFtKHRlYW1UYWN0aWNzKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0dXBUYWN0aWNzKHRlYW1PYmplY3QpIHtcbiAgICAkKCcudGVhbS1wYW5lbCcpLmh0bWwoJycpO1xuICAgICQoJy5mb3JtYXRpb24nKS52YWwodGVhbU9iamVjdC5mb3JtYXRpb24pO1xuXG4gICAgLy8gU29ydHMgcGxheWVycyBpbiBvcmRlciBvZiBwb3NpdGlvbiBbR0ssIERlZiwgTWlkLCBBdHRdXG4gICAgdGVhbU9iamVjdC5wbGF5ZXJzLnNvcnQoZnVuY3Rpb24oYSxiKXtcbiAgICAgIHJldHVybiBwb3NpdGlvbnMuaW5kZXhPZihhLnBvc2l0aW9uKSA8IHBvc2l0aW9ucy5pbmRleE9mKGIucG9zaXRpb24pID8gLTEgOiAxO1xuICAgIH0pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZWFtT2JqZWN0LnBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHBsYXllciA9IHRlYW1PYmplY3QucGxheWVyc1tpXTtcblxuICAgICAgLy8gSWYgc3RhcnQgZ2l2ZSBhbiBIVE1MIHRpY2ssIGVsc2UgZ2l2ZSBhbiBIVE1MIGNyb3NzXG4gICAgICBjb25zdCBzdGFydGluZ0VsZXZlbiA9IHBsYXllci5wbGF5aW5nID8gJyYjMTAwMDQ7JyA6ICcmIzEwMDA3Oyc7XG5cbiAgICAgIC8vIEJ1aWxkIHRhYmxlIG9mIHNxdWFkIHBsYXllcnMgLSBpbnNlcnQgcmVsZXZhbnQgY2xhc3MgdG8gcmVmbGVjdCBwbGF5ZXIgc3RhdHVzLCBlLmcuIHNlbnQgb2ZmLCB5ZWxsb3csIGluanVyZWQsIHN1YnN0aXR1dGVkXG4gICAgICAkKCcudGVhbS1wYW5lbCcpLmFwcGVuZChcbiAgICAgICAgYDxwIGNsYXNzPVwicGxheWVyLWxpbmUgJHtwbGF5ZXIucG9zaXRpb259ICR7cGxheWVyLnN0YXR1c31cIiBpZD0nJHtwbGF5ZXIubmFtZX0nPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhcnRpbmcgJHtwbGF5ZXIuc3RhdHVzfVwiIGlkPVwiJHtpfVwiPiR7c3RhcnRpbmdFbGV2ZW59PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGxheWVyLXBvc2l0aW9uIFwiPiR7cGxheWVyLnBvc2l0aW9ufTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInBsYXllci1uYW1lXCI+JHtwbGF5ZXIubmFtZX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJwbGF5ZXItc3RhdFwiPiR7cGxheWVyLmF0dGFja308L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJwbGF5ZXItc3RhdFwiPiR7cGxheWVyLmRlZmVuY2V9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwicGxheWVyLXN0YXRcIj4ke3BsYXllci5jcmVhdGl2aXR5fTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInBsYXllci1zdGF0XCI+JHtwbGF5ZXIuZGVmZW5jZX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJwbGF5ZXItc3RhdFwiPiR7cGxheWVyLmZpdG5lc3N9PC9zcGFuPlxuICAgICAgICA8L3A+YFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuXG4gIGZ1bmN0aW9uIHBhdXNlUGxheSgpIHtcbiAgICBpZiAocnVuKSB7XG4gICAgICBydW4gPSAhcnVuO1xuICAgIH1cblxuICAgICRwcmltYXJ5QnV0dG9uLnRleHQoJ1BsYXknKTtcbiAgICAkKCcubWF0Y2gtc2V0dXAsIC5tYXRjaC1lbmdpbmUnKS5oaWRlKCk7XG4gICAgc2V0dXBUYWN0aWNzKGhvbWVUZWFtKTtcbiAgICB0ZWFtVGFjdGljcyA9IGhvbWVUZWFtO1xuICAgIHJldmVhbFRlYW0odGVhbVRhY3RpY3MpO1xuICAgICQoJy50ZWFtLXNldHVwJykuc2hvdygpO1xuXG4gIH1cblxuICBmdW5jdGlvbiByZXZlYWxUZWFtKHRlYW1PYmplY3QpIHtcbiAgICAkKCcudGVhbS1kaXNwbGF5JykuaHRtbCgnJyk7XG5cbiAgICAvLyBTcGxpdCBmb3JtYXRpb24gaW50byBhbiBhcnJheVxuICAgIGNvbnN0IGZvcm1hdGlvbiA9IFsnMSddLmNvbmNhdCh0ZWFtT2JqZWN0LmZvcm1hdGlvbi5zcGxpdCgnLScpKTtcblxuICAgIGxldCBwbGF5ZXJOdW1iZXIgPSAwO1xuICAgIGxldCBwb3NpdGlvbk51bWJlciA9IDA7XG5cblxuICAgIHRyeSB7XG4gICAgICAvLyBUcnkgdG8gbWFwIHRocm91Z2ggdGhlIGZvcm1hdGlvbiBhcnJheSwgZS5nLiBbMSw0LDIsMl0gKGluY2x1c2l2ZSBvZiBnb2Fsa2VlcGVyKVxuICAgICAgZm9ybWF0aW9uLm1hcCgoYXJyYXlJdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZXJhdGlvbnMgPSBwYXJzZUZsb2F0KGFycmF5SXRlbSk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHBsYXllcnMgd2hpbGUgaSAoaW5pdGlhbGx5IDApIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIHBvc2l0aW9ucyByZXF1aXJlZFxuICAgICAgICB3aGlsZSAoaSA8IGl0ZXJhdGlvbnMpIHtcbiAgICAgICAgICAvLyBJZiBwbGF5ZXIucGxheWluZyA9PT0gdHJ1ZSBPUiBpZiBwbGF5ZXIuc3RhdHVzIGlzICdlamVjdGVkJyAoc2VudCBvZmYpLiBQbGF5ZXJzIHdpdGggcmVkIGNhcmRzIGNvbnRpbnVlIHRvIGJlIGFkZGVkIHRvIHRoZSB0ZWFtIHNoZWV0LCBzbyB0aGF0IHRoZXkgY2Fubm90IGJlIHJlbW92ZWQvcmVwbGFjZWQuIEEgY2xhc3Mgb2YgLnJlZCBpcyBhZGRlZCwgd2hpY2ggZGlhYmxlZHMgdGhlIGFiaWxpdHkgdG8gc3Vic3RpdHV0ZSB0aGVtLiBQbGF5ZXJzIHdpdGggYSBzdGF0dXMgb2YgJ2VqZWN0ZWQnIGhhdmUgYSAucGxheWluZyB2YWx1ZSBvZiBmYWxzZSAtIHRoZXkgbm8gbG9uZ2VyIGluZmx1ZW5jZSBldmVudHMuXG4gICAgICAgICAgaWYgKHRlYW1PYmplY3QucGxheWVyc1twbGF5ZXJOdW1iZXJdLnBsYXlpbmcgfHwgdGVhbU9iamVjdC5wbGF5ZXJzW3BsYXllck51bWJlcl0uc3RhdHVzID09PSAnZWplY3RlZCcpIHtcblxuICAgICAgICAgICAgLy8gSWYgcGxheWVyIGhhcyBiZWVuIHBsYWNlZCBvdXQgb2YgcG9zaXRpb24gYWRkIGEgd2FybmluZyBjbGFzc1xuICAgICAgICAgICAgY29uc3Qgd2FybmluZ01lc3NhZ2UgPSBwb3NpdGlvbnNbcG9zaXRpb25OdW1iZXJdICE9PSB0ZWFtT2JqZWN0LnBsYXllcnNbcGxheWVyTnVtYmVyXS5wb3NpdGlvbiA/ICd3YXJuaW5nJyA6ICcnO1xuXG4gICAgICAgICAgICAvLyBBcHBlbmQgcGxheWVyIG9uIHRvIHRoZSBwaXRjaCBtYXAgd2l0aCBjbGFzc2VzIHRoYXQgaW5kaWNhdGUgdGhlIHBsYXllcidzIHN0YXR1cyxlLmcuIHJlZCBjYXJkLCB5ZWxsb3cgY2FyZCBvciBvdXQgb2YgcG9zaWl0b25cbiAgICAgICAgICAgICQoJy50ZWFtLWRpc3BsYXknKS5hcHBlbmQoXG4gICAgICAgICAgICAgIGA8c3BhbiBjbGFzcz0ncGxheWVyLWJsb2NrICR7d2FybmluZ01lc3NhZ2V9ICR7KHRlYW1PYmplY3QucGxheWVyc1twbGF5ZXJOdW1iZXJdLnN0YXR1cyl9Jz4ke3RlYW1PYmplY3QucGxheWVyc1twbGF5ZXJOdW1iZXJdLm5hbWV9PC9zcGFuPmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0ZWFtT2JqZWN0LnBsYXllcnNbcGxheWVyTnVtYmVyXS5jaG9zZW5Qb3NpdGlvbiA9IHBvc2l0aW9uc1twb3NpdGlvbk51bWJlcl07XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBsYXllck51bWJlcisrO1xuICAgICAgICB9XG4gICAgICAgICQoJy50ZWFtLWRpc3BsYXknKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJzZXBlcmF0ZS1wbGF5ZXJzXCI+Jyk7XG4gICAgICAgIHBvc2l0aW9uTnVtYmVyKys7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgLy8gVGhyb3dzIGFuIGVycm9yIHdoZW4gZmV3ZXIgdGhhbiAxMSBwbGF5ZXJzIGFyZSBzZWxlY3RlZC4gSXQgZGlzcGxheXMgYSB3YXJuaW5nLiBEbyBub3Qgd2FudCB0byBwcmV2ZW50IHNlbGVjdGlvbnMgYXMgdGhlcmUgYXJlIGxlZ2l0bWF0ZSByZWFzb25zIHdoeSBmZXdlciB0aGFuIDExIHBsYXllcnMgbWF5IGJlIHNlbGVjdGVkLCBlLmcuIHJlZCBjYXJkcyBvciBpbmp1cmllc1xuICAgICAgJCgnLnRlYW0tZGlzcGxheScpLmFwcGVuZChgPHAgY2xhc3M9J3RlYW0tc2VsZWN0aW9uLXdhcm5pbmcgc2VwZXJhdGUtcGxheWVycyc+TGVzcyB0aGFuIDExIHBsYXllcnMgc2VsZWN0ZWQhPC9wPmApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNob29zZVBsYXllcnModGVhbU9iamVjdCwgc2VsZWN0ZWRQbGF5ZXIpIHtcblxuICAgIHRlYW1PYmplY3QucGxheWVyc1tzZWxlY3RlZFBsYXllcl0ucGxheWluZyA9ICF0ZWFtT2JqZWN0LnBsYXllcnNbc2VsZWN0ZWRQbGF5ZXJdLnBsYXlpbmc7XG5cbiAgICByZXZlYWxUZWFtKHRlYW1UYWN0aWNzKTtcblxuICAgIGlmICh0ZWFtT2JqZWN0LnBsYXllcnNbc2VsZWN0ZWRQbGF5ZXJdLnBsYXlpbmcpIHtcbiAgICAgICQoYCMke3NlbGVjdGVkUGxheWVyfWApLmh0bWwoJyYjMTAwMDQ7Jyk7XG4gICAgICBpZiAoZ2FtZVN0YXJ0ZWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQnKTtcbiAgICAgICAgJChgIyR7c2VsZWN0ZWRQbGF5ZXJ9YCkucGFyZW50KCkuY3NzKHsnYmFja2dyb3VuZCc6ICdncmVlbid9KTtcbiAgICAgICAgY29uc3QgcGxheWVyT24gPSB0ZWFtT2JqZWN0LnBsYXllcnNbc2VsZWN0ZWRQbGF5ZXJdO1xuICAgICAgICBzdWJzdGl0dXRlKHRlYW1PYmplY3QsIHBsYXllck9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgJChgIyR7c2VsZWN0ZWRQbGF5ZXJ9YCkuaHRtbCgnJiMxMDAwNzsnKTtcbiAgICAgIGlmIChnYW1lU3RhcnRlZCkge1xuICAgICAgICAkKGAjJHtzZWxlY3RlZFBsYXllcn1gKS5wYXJlbnQoKS5jc3Moeydwb2ludGVyLWV2ZW50cyc6ICdub25lJywgJ2JhY2tncm91bmQnOiAncmVkJ30pO1xuICAgICAgICBjb25zdCBwbGF5ZXJPZmYgPSB0ZWFtT2JqZWN0LnBsYXllcnNbc2VsZWN0ZWRQbGF5ZXJdO1xuICAgICAgICBzdWJzdGl0dXRlKHRlYW1PYmplY3QsIHBsYXllck9mZik7XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHN1YnN0aXR1dGUodGVhbU9iamVjdCwgcGxheWVyKSB7XG4gICAgaWYgKHRlYW1PYmplY3Quc3VicyA8IDcpIHtcbiAgICAgIGlmICghcGxheWVyLnBsYXlpbmcpIHtcbiAgICAgICAgJChgIyR7dGVhbU9iamVjdC5wbGFjZX1FdmVudHNgKS5hcHBlbmQoYDxpIGNsYXNzPSdmYSBmYS1hcnJvdy1yaWdodCcgc3R5bGU9J2ZvbnQtc2l6ZTogMjJweDsgY29sb3I6cmVkOyBwYWRkaW5nLXRvcDo1cHgnIGFyaWEtaGlkZGVuPSd0cnVlJz48L2k+ICR7bWF0Y2hUaW1lfSBtaW5zOiAke3BsYXllci5uYW1lfSBzdWJzdGl0dXRlZDxici8+YCk7XG4gICAgICAgIHRlYW1PYmplY3Quc3VicyArPSAxO1xuICAgICAgICBwbGF5ZXIucGxheWluZyA9IGZhbHNlO1xuICAgICAgICBwbGF5ZXIuc3RhdHVzID0gJ3N1YmJlZC1vZmYnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgIyR7dGVhbU9iamVjdC5wbGFjZX1FdmVudHNgKS5hcHBlbmQoYDxpIGNsYXNzPSdmYSBmYS1hcnJvdy1yaWdodCcgc3R5bGU9J2ZvbnQtc2l6ZTogMjJweDsgY29sb3I6Z3JlZW47IHBhZGRpbmctdG9wOjVweCcgYXJpYS1oaWRkZW49J3RydWUnPjwvaT4gJHttYXRjaFRpbWV9IG1pbnM6ICR7cGxheWVyLm5hbWV9IHN1YnN0aXR1dGVkPGJyLz5gKTtcbiAgICAgICAgdGVhbU9iamVjdC5zdWJzICs9IDE7XG4gICAgICAgIHBsYXllci5wbGF5aW5nID0gdHJ1ZTtcbiAgICAgICAgcGxheWVyLnN0YXR1cyA9ICdzdWJiZWQtb24nO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnWW91IGhhdmUgaGFkIDMgc3VicyEnKTtcbiAgICB9XG4gIH1cblxuICAvLyBGdW5jdGlvbnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cblxuICBmdW5jdGlvbiB0aW1lQ29udHJvbCgpIHtcblxuICAgIGlmKG1hdGNoVGltZSA9PT0gNDQpIHtcbiAgICAgICRjb21tZW50YXJ5Qm94LnRleHQoYFRoYXQncyBoYWxmLXRpbWUhYCk7XG4gICAgICBydW4gPSAhcnVuO1xuICAgICAgJHByaW1hcnlCdXR0b24udGV4dCgnUGxheScpO1xuICAgIH1cblxuICAgIGlmKG1hdGNoVGltZSA9PT0gOTApIHtcbiAgICAgICRjb21tZW50YXJ5Qm94LnRleHQoYFRoYXQncyBmdWxsLXRpbWUhYCk7XG4gICAgICBjbGVhckludGVydmFsKHRpbWVySUQpO1xuICAgICAgJHByaW1hcnlCdXR0b24udGV4dCgnRmluaXNoJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdGNoVGltZSsrO1xuICAgICAgJG1hdGNoVGltZS50ZXh0KG1hdGNoVGltZSk7XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiBnZW5SYW5kb21WYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdmUoKSB7XG5cbiAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hvbWVCYXInKTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgdHdvIHRlYW1zIGNyZWF0aXZpdHkgc2NvcmVzIGFuZCBjb3ZlcnQgdGhlbSBpbnRvIGEgcGVyY2VudGFnZSBvdXQgb2YgMTAwIC0gdGhpcyBpcyBmb3IgdGhlIHBvc3Nlc3Npb24gYmFyLlxuICAgIC8vIEl0ICsvLSBhIHNtYWxsIGxvdyBsZXZlbCBpbnRlZ2VyIHRvIGtlZXAgaXQgbW92aW5nIGNvbnRpbm91c2x5XG4gICAgd2lkdGggPSAoaG9tZVRlYW0uYXZlcmFnZVBsYXllclZhbHVlcygnY3JlYXRpdml0eScpIC8gKGhvbWVUZWFtLmF2ZXJhZ2VQbGF5ZXJWYWx1ZXMoJ2NyZWF0aXZpdHknKSArIGF3YXlUZWFtLmF2ZXJhZ2VQbGF5ZXJWYWx1ZXMoJ2NyZWF0aXZpdHknKSkgKiAxMDApICsgKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAtZ2VuUmFuZG9tVmFsdWUoNikgOiBnZW5SYW5kb21WYWx1ZSg2KSk7XG5cbiAgICBlbGVtLnN0eWxlLndpZHRoID0gd2lkdGggKyAnJSc7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RUZWFtKCkge1xuICAgIC8vIEdlbmVyYXRlIGEgcmFuZG9tIHZhbHVlcyBmcm9tIGhvbWUgYW5kIGF3YXkgdGVhbSB1c2luZyB0aGVpciBhdmVyYWdlIGNyZWF0aXZpdHkgc2NvcmVzIGZyb20gcGxheWVycyBvbiB0aGUgcGl0Y2hcbiAgICAvLyBUaGUgaGlnaGVyIGEgdGVhbXMgY3JlYXRpdml0eSBzY29yZSwgdGhlIG1vcmUgY2hhbmNlcyB0aGV5IHdpbGwgY3JlYXRlXG4gICAgLy8gMjQuMDUuMjAxNyAtIGFkZGVkIGEgRml0bmVzcyB2YWx1ZSBmb3IgZXZlcnkgcGxheWVyLCB3aGljaCBkZWNyZWFzZXMgdGhyb3VnaCB0aGUgZ2FtZS4gVGhpcyBpcyBub3cgYWRkZWQgdG8gdGhlIHJhbmRvbSBjcmVhdGl2aXR5IHNjb3JlIHRvIGRldGVybWluZSwgd2hpY2ggdGVhbSBob21lL2F3YXkgZ2V0cyB0aGUgY2hhbmNlLlxuICAgIGNvbnN0IGhvbWVSYW5kb20gPSAgZ2VuUmFuZG9tVmFsdWUoaG9tZVRlYW0uYXZlcmFnZVBsYXllclZhbHVlcygnY3JlYXRpdml0eScpICsgaG9tZVRlYW0uYXZlcmFnZVBsYXllclZhbHVlcygnZml0bmVzcycpKTtcbiAgICBjb25zdCBhd2F5UmFuZG9tID0gIGdlblJhbmRvbVZhbHVlKGF3YXlUZWFtLmF2ZXJhZ2VQbGF5ZXJWYWx1ZXMoJ2NyZWF0aXZpdHknKSArIGF3YXlUZWFtLmF2ZXJhZ2VQbGF5ZXJWYWx1ZXMoJ2ZpdG5lc3MnKSk7XG5cbiAgICBpZiAoaG9tZVJhbmRvbSA+PSBhd2F5UmFuZG9tKSB7XG4gICAgICAvLyBDaGFuZ2UgY29tbWVudGFyeSB0ZXh0IGJveCB0byBjb2xvcnMgb2YgYXR0YWNraW5nIHRlYW1cbiAgICAgIC8vIE1lZGl1bSAtIExvb2sgYXQgcmVmYWN0b3JpbmcgdGhpcyAtIHNvbWUgZHVwbGljYXRpb25cbiAgICAgICRjb21tZW50YXJ5Qm94LmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGhvbWVUZWFtLmNvbG9yc1swXSk7XG4gICAgICAkY29tbWVudGFyeUJveC5jc3MoJ2NvbG9yJywgaG9tZVRlYW0uY29sb3JzWzFdKTtcbiAgICAgIGlmIChnZW5SYW5kb21WYWx1ZSgyMCkgJSA0ID09PSAwKSB7XG4gICAgICAgICRjb21tZW50YXJ5Qm94LnRleHQoZ2VuZXJhdGVDb21tZW50YXJ5KCdjaGFuY2UnLCcnKSk7XG4gICAgICAgIGhvbWVUZWFtLmluY3JlYXNlVmFsdWVzKDMsJ2F0dGFjaycsWydtaWRmaWVsZGVyJywgJ3N0cmlrZXInXSk7XG4gICAgICAgIGhvbWVUZWFtLmluY3JlYXNlVmFsdWVzKDMsJ2NyZWF0aXZpdHknLFsnbWlkZmllbGRlcicsICdzdHJpa2VyJ10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtob21lVGVhbSwgYXdheVRlYW1dO1xuICAgIH0gZWxzZSB7XG4gICAgICAkY29tbWVudGFyeUJveC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBhd2F5VGVhbS5jb2xvcnNbMF0pO1xuICAgICAgJGNvbW1lbnRhcnlCb3guY3NzKCdjb2xvcicsIGF3YXlUZWFtLmNvbG9yc1sxXSk7XG4gICAgICBpZiAoZ2VuUmFuZG9tVmFsdWUoMjApICUgNCA9PT0gMCl7XG4gICAgICAgIGF3YXlUZWFtLmluY3JlYXNlVmFsdWVzKDMsJ2F0dGFjaycsWydtaWRmaWVsZGVyJywgJ3N0cmlrZXInXSk7XG4gICAgICAgIGF3YXlUZWFtLmluY3JlYXNlVmFsdWVzKDMsJ2NyZWF0aXZpdHknLFsnbWlkZmllbGRlcicsICdzdHJpa2VyJ10pO1xuICAgICAgICAkY29tbWVudGFyeUJveC50ZXh0KGdlbmVyYXRlQ29tbWVudGFyeSgnY2hhbmNlJywnJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFthd2F5VGVhbSwgaG9tZVRlYW1dO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gUkVNT1ZFXG4gIC8vIGZ1bmN0aW9uIHNlbGVjdFBsYXllcih0ZWFtKSB7XG4gIC8vICAgY29uc3QgZ2VuUmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0ZWFtLnBsYXllcnMubGVuZ3RoKTtcbiAgLy8gICByZXR1cm4gdGVhbS5wbGF5ZXJzW2dlblJhbmRvbUluZGV4XTtcbiAgLy8gfVxuXG4gIGZ1bmN0aW9uIGdvYWxDaGFuY2UoYXR0YWNraW5nVGVhbSwgZGVmZW5kaW5nVGVhbSkge1xuICAgIC8vIFJlZmFjdG9yIHRoaXNcbiAgICBjb25zdCBhdHRhY2tpbmdQbGF5ZXIgPSBhdHRhY2tpbmdUZWFtLnJhbmRvbVBsYXllcigpO1xuICAgIGNvbnN0IGRlZmVuZGluZ1BsYXllciA9IGRlZmVuZGluZ1RlYW0ucmFuZG9tUGxheWVyQnlQb3NpdGlvbignZGVmZW5kZXInKTtcblxuICAgIGlmIChnZW5SYW5kb21WYWx1ZShhdHRhY2tpbmdQbGF5ZXIuYXR0YWNrKSA+IGdlblJhbmRvbVZhbHVlKGRlZmVuZGluZ1BsYXllci5kZWZlbmNlKSkge1xuXG4gICAgICBnZW5lcmF0ZUNvbW1lbnRhcnkoJ2dvYWwnLCBhdHRhY2tpbmdQbGF5ZXIpO1xuICAgICAgdXBkYXRlU2NvcmUoYXR0YWNraW5nVGVhbSk7XG5cbiAgICAgIC8vIFJlZmFjdG9yIHRoZXNlIG1lc3NhZ2VzIC0gdXNlIGEgZnVuY3Rpb24gd2hpY2ggcGFzc2VzIGluIHBsYXllciwgdGVhbU9iamVjdCwgY29sb3IgYW5kIGljb24gbmFtZVxuICAgICAgJChgIyR7YXR0YWNraW5nVGVhbS5wbGFjZX1FdmVudHNgKS5hcHBlbmQoYDxpIGNsYXNzPSdmYSBmYS1mdXRib2wtbycgc3R5bGU9J2ZvbnQtc2l6ZTogMjJweDsgY29sb3I6d2hpdGU7IHBhZGRpbmctdG9wOjVweCcgYXJpYS1oaWRkZW49J3RydWUnPjwvaT4gJHttYXRjaFRpbWV9IG1pbnM6ICR7YXR0YWNraW5nUGxheWVyLm5hbWV9IHNjb3JlZDxici8+YCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRGlzY2lwbGluZShhdHRhY2tpbmdUZWFtLCBkZWZlbmRpbmdUZWFtKSB7XG5cbiAgICAvLyBSZWZhY3RvclxuICAgIC8vIEFUVEFDS0lORyBURUFNIFJFRFVOREFOVFxuICAgIC8vIHRlYW1TdHJpbmcgY2FuIGJlIHN1YnN0aXR1dGVkIGZvciBkZWZlbmRpbmdUZWFtLnBsYWNlXG4gICAgY29uc3QgZGVmZW5kaW5nUGxheWVyID0gZGVmZW5kaW5nVGVhbS5yYW5kb21QbGF5ZXIoKTtcblxuXG4gICAgLy8gVGFrZXMgbWF0Y2ggdGltZSBpbiBhY2NvdW50LCB3aGljaCBkZWNyZWFzZXMgdGhlIGxpa2VsaWhvb2Qgb2YgYm9va2luZ3MgaGFwcGVuaW5nIGVhcmxpZXIgaW4gdGhlIGdhbWUuXG4gICAgaWYgKChnZW5SYW5kb21WYWx1ZShkZWZlbmRpbmdQbGF5ZXIuZGlzY2lwbGluZSkgKyAoMTAwLW1hdGNoVGltZSkpIDwgOTAgJiYgZGVmZW5kaW5nUGxheWVyLnN0YXR1cyAhPT0gJ2VqZWN0ZWQnKSB7XG5cbiAgICAgIC8vIEFscmVhZHkgYm9va2VkPyBTZW5kIGhpbSBvZmYhXG4gICAgICBpZiAoZGVmZW5kaW5nUGxheWVyLnN0YXR1cyA9PT0gJ3llbGxvdycpIHtcbiAgICAgICAgLy8gUmVmYWN0b3IgY3JlYXRlIGEgY2xhc3Mgb3IgcGFzcyBpbiBhcyBhbiBvYmplY3QgLSBvbmUgbGluZVxuICAgICAgICAkY29tbWVudGFyeUJveC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnI0ZGMDAwMCcpO1xuICAgICAgICAkY29tbWVudGFyeUJveC5jc3MoJ2NvbG9yJywgJyNGRkZGRkYnKTtcbiAgICAgICAgZGVmZW5kaW5nVGVhbS5yZWR1Y2VWYWx1ZXMoMTAsJ2RlZmVuY2UnLFsnc3RyaWtlcicsJ21pZGZpZWxkZXInLCAnZGVmZW5kZXInLCAnZ29hbGtlZXBlciddKTtcbiAgICAgICAgZGVmZW5kaW5nVGVhbS5yZWR1Y2VWYWx1ZXMoMjUsJ2F0dGFjaycsWydzdHJpa2VyJywnbWlkZmllbGRlcicsICdkZWZlbmRlcicsICdnb2Fsa2VlcGVyJ10pO1xuICAgICAgICBkZWZlbmRpbmdUZWFtLnJlZHVjZVZhbHVlcygyNSwnY3JlYXRpdml0eScsWydzdHJpa2VyJywnbWlkZmllbGRlcicsICdkZWZlbmRlcicsICdnb2Fsa2VlcGVyJ10pO1xuXG4gICAgICAgIGdlbmVyYXRlQ29tbWVudGFyeSgnc2Vjb25kWWVsbG93JywgZGVmZW5kaW5nUGxheWVyKTtcblxuICAgICAgICAvLyBSZWZhY3RvciB0aGVzZSBtZXNzYWdlcyAtIHVzZSBhIGZ1bmN0aW9uIHdoaWNoIHBhc3NlcyBpbiBwbGF5ZXIsIHRlYW1PYmplY3QsIGNvbG9yIGFuZCBpY29uIG5hbWVcbiAgICAgICAgJChgIyR7ZGVmZW5kaW5nVGVhbS5wbGFjZX1FdmVudHNgKS5hcHBlbmQoYDxpIGNsYXNzPSdmYSBmYS1zcXVhcmUgZXZlbnQtaXRlbScgc3R5bGU9J2ZvbnQtc2l6ZTogMjRweDsgY29sb3I6IHJlZDsgcGFkZGluZy10b3A6NXB4JyBhcmlhLWhpZGRlbj0ndHJ1ZSc+PC9pPiAke21hdGNoVGltZX0gbWluczogJHtkZWZlbmRpbmdQbGF5ZXIubmFtZX0gc2VudCBvZmY8YnIvPmApO1xuICAgICAgICBkZWZlbmRpbmdQbGF5ZXIuc3RhdHVzID0gJ2VqZWN0ZWQnO1xuICAgICAgICBkZWZlbmRpbmdQbGF5ZXIucGxheWluZyA9IGZhbHNlO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZWZhY3RvciBjcmVhdGUgYSBjbGFzcyBvciBwYXNzIGluIGFzIGFuIG9iamVjdCAtIG9uZSBsaW5lXG4gICAgICAgICRjb21tZW50YXJ5Qm94LmNzcygnYmFja2dyb3VuZC1jb2xvcicsICd5ZWxsb3cnKTtcbiAgICAgICAgJGNvbW1lbnRhcnlCb3guY3NzKCdjb2xvcicsICcjMDAwMDAwJyk7XG4gICAgICAgIGdlbmVyYXRlQ29tbWVudGFyeSgneWVsbG93JywgZGVmZW5kaW5nUGxheWVyKTtcbiAgICAgICAgZGVmZW5kaW5nUGxheWVyLmRlZmVuY2UgLT0gODtcblxuICAgICAgICAkKGAjJHtkZWZlbmRpbmdUZWFtLnBsYWNlfUV2ZW50c2ApLmFwcGVuZChgXG4gICAgICAgICAgPGkgY2xhc3M9J2ZhIGZhLXNxdWFyZSBldmVudC1pdGVtJyBzdHlsZT0nZm9udC1zaXplOiAyNHB4OyBjb2xvcjogeWVsbG93OyBwYWRkaW5nLXRvcDo1cHgnIGFyaWEtaGlkZGVuPSd0cnVlJz48L2k+ICR7bWF0Y2hUaW1lfSBtaW5zOiAke2RlZmVuZGluZ1BsYXllci5uYW1lfSBib29rZWQ8YnIvPmApO1xuICAgICAgICBkZWZlbmRpbmdQbGF5ZXIuc3RhdHVzID0gJ3llbGxvdyc7XG4gICAgICAgIGRlZmVuZGluZ1BsYXllci5maXRuZXNzIC09IGdlblJhbmRvbVZhbHVlKDUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUluanVyeShhdHRhY2tpbmdUZWFtKSB7XG4gICAgY29uc3QgYXR0YWNraW5nUGxheWVyID0gYXR0YWNraW5nVGVhbS5yYW5kb21QbGF5ZXIoKTtcblxuICAgIGlmIChnZW5SYW5kb21WYWx1ZSgxMDEpICUgNDAgPT09IDApIHtcblxuICAgICAgZ2VuZXJhdGVDb21tZW50YXJ5KCdpbmp1cnknLCBhdHRhY2tpbmdQbGF5ZXIpO1xuICAgICAgJChgIyR7YXR0YWNraW5nVGVhbS5wbGFjZX1FdmVudHNgKS5hcHBlbmQoYDxpIGNsYXNzPSdmYSBmYS1wbHVzJyBzdHlsZT0nZm9udC1zaXplOiAyNnB4OyBjb2xvcjogZ3JlZW47IHBhZGRpbmctdG9wOjVweCcgYXJpYS1oaWRkZW49J3RydWUnPjwvaT4gJHttYXRjaFRpbWV9IG1pbnM6ICR7YXR0YWNraW5nUGxheWVyLm5hbWV9IGluanVyZWQ8YnIvPmApO1xuICAgICAgaWYgKGF0dGFja2luZ1RlYW0ucGxhY2UgPT09ICdhd2F5Jykge1xuICAgICAgICBhdHRhY2tpbmdQbGF5ZXIucGxheWluZyA9ICFhdHRhY2tpbmdQbGF5ZXIucGxheWluZztcbiAgICAgICAgc3Vic3RpdHV0ZShhd2F5VGVhbSwgYXR0YWNraW5nUGxheWVyKTtcbiAgICAgICAgY29uc3QgYWRkUGxheWVyID0gYXdheVRlYW0ucmFuZG9tU3Vic3RpdHV0ZShhdHRhY2tpbmdQbGF5ZXIucG9zaXRpb24pO1xuICAgICAgICBhZGRQbGF5ZXIucGxheWluZyA9ICFhZGRQbGF5ZXIucGxheWluZztcbiAgICAgICAgc3Vic3RpdHV0ZShhd2F5VGVhbSwgYWRkUGxheWVyKTtcbiAgICAgIH0gZWxzZSBpZiAoYXR0YWNraW5nVGVhbS5wbGFjZSA9PT0gJ2hvbWUnKSB7XG4gICAgICAgIGF0dGFja2luZ1BsYXllci5maXRuZXNzID0gMCArIGdlblJhbmRvbVZhbHVlKDMwKTtcbiAgICAgICAgYXR0YWNraW5nUGxheWVyLnN0YXR1cyA9ICdpbmp1cmVkJztcbiAgICAgICAgYXR0YWNraW5nUGxheWVyLnBsYXlpbmcgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBhdHRhY2tpbmdQbGF5ZXIuZml0bmVzcyAtPSBnZW5SYW5kb21WYWx1ZSgxNSk7XG4gICAgICBhdHRhY2tpbmdQbGF5ZXIuZGVmZW5jZSAtPSBnZW5SYW5kb21WYWx1ZSgxMCk7XG4gICAgICBhdHRhY2tpbmdQbGF5ZXIuYXR0YWNrIC09IGdlblJhbmRvbVZhbHVlKDEwKTtcbiAgICAgIC8vIFJlZmFjdG9yIC1cbiAgICAgIGdlbmVyYXRlQ29tbWVudGFyeSgnbmVhck1pc3MnLCBhdHRhY2tpbmdQbGF5ZXIpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRnJlZWtpY2soYXR0YWNraW5nVGVhbSwgZGVmZW5kaW5nVGVhbSkge1xuICAgIGNvbnN0IGF0dGFja2luZ1BsYXllciA9IGF0dGFja2luZ1RlYW0ucmFuZG9tUGxheWVyQnlQb3NpdGlvbignbWlkZmllbGRlcicpO1xuICAgIGNvbnN0IGRlZmVuZGluZ1ZhbHVlID0gKGRlZmVuZGluZ1RlYW0ucmFuZG9tUGxheWVyQnlQb3NpdGlvbignZ29hbGtlZXBlcicpLmRlZmVuY2UgKyBkZWZlbmRpbmdUZWFtLmF2ZXJhZ2VQbGF5ZXJWYWx1ZXMoJ2RlZmVuZGVyJykpO1xuXG4gICAgaWYgKGF0dGFja2luZ1BsYXllci5hdHRhY2sgPiBkZWZlbmRpbmdWYWx1ZSkge1xuICAgICAgdXBkYXRlU2NvcmUoYXR0YWNraW5nVGVhbSk7XG5cbiAgICAgIGdlbmVyYXRlQ29tbWVudGFyeSgnZnJlZWtpY2snLCBhdHRhY2tpbmdQbGF5ZXIpO1xuICAgICAgJChgIyR7YXR0YWNraW5nVGVhbS5wbGFjZX1FdmVudHNgKS5hcHBlbmQoYDxpIGNsYXNzPSdmYSBmYS1mdXRib2wtbycgc3R5bGU9J2ZvbnQtc2l6ZTogMjJweDsgY29sb3I6d2hpdGU7IHBhZGRpbmctdG9wOjVweCcgYXJpYS1oaWRkZW49J3RydWUnPjwvaT4gJHttYXRjaFRpbWV9IG1pbnM6ICR7YXR0YWNraW5nUGxheWVyLm5hbWV9IHNjb3JlZDxici8+YCk7XG4gICAgICBhdHRhY2tpbmdQbGF5ZXIuYXR0YWNrICs9IDU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbmVyYXRlQ29tbWVudGFyeSgnd2FzdGVkRnJlZWtpY2snLCBhdHRhY2tpbmdQbGF5ZXIpO1xuICAgICAgYXR0YWNraW5nUGxheWVyLmNyZWF0aXZpdHkgLT0gNTtcbiAgICAgIGF0dGFja2luZ1RlYW0ucmVkdWNlVmFsdWVzKGdlblJhbmRvbVZhbHVlKDEwKSwgJ2F0dGFjaycsIFsnc3RyaWtlcicsICdtaWRmaWVsZGVyJ10pO1xuICAgICAgYXR0YWNraW5nVGVhbS5yZWR1Y2VWYWx1ZXMoZ2VuUmFuZG9tVmFsdWUoMTApLCAnY3JlYXRpdml0eScsIFsnc3RyaWtlcicsICdtaWRmaWVsZGVyJ10pO1xuXG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZVBlbmFsdHkoYXR0YWNraW5nVGVhbSwgZGVmZW5kaW5nVGVhbSkge1xuXG4gICAgY29uc3QgYXR0YWNraW5nUGxheWVyID0gYXR0YWNraW5nVGVhbS5yYW5kb21QbGF5ZXJCeVBvc2l0aW9uKCdzdHJpa2VyJyk7XG4gICAgY29uc3QgZGVmZW5kaW5nUGxheWVyID0gZGVmZW5kaW5nVGVhbS5yYW5kb21QbGF5ZXJCeVBvc2l0aW9uKCdnb2Fsa2VlcGVyJyk7XG4gICAgY29uc3QgYm9va2VkUGxheWVyID0gZGVmZW5kaW5nVGVhbS5yYW5kb21QbGF5ZXJCeVBvc2l0aW9uKCdkZWZlbmRlcicpO1xuICAgIC8vIEJvb2sgdGhlIHBsYXllcj9cbiAgICBpZiAoZ2VuUmFuZG9tVmFsdWUoMTAwKSA+IDI1KSB7XG4gICAgICBib29rZWRQbGF5ZXIuc3RhdHVzID0gJ3llbGxvdyc7XG4gICAgICAkKGAjJHtkZWZlbmRpbmdUZWFtLnBsYWNlfUV2ZW50c2ApLmFwcGVuZChgPGkgY2xhc3M9J2ZhIGZhLXNxdWFyZSBldmVudC1pdGVtJyBzdHlsZT0nZm9udC1zaXplOiAyNHB4OyBjb2xvcjogeWVsbG93OyBwYWRkaW5nLXRvcDo1cHgnIGFyaWEtaGlkZGVuPSd0cnVlJz48L2k+ICR7bWF0Y2hUaW1lfSBtaW5zOiAke2Jvb2tlZFBsYXllci5uYW1lfSBib29rZWQ8YnIvPmApO1xuICAgIH1cblxuICAgIGlmICgoZ2VuUmFuZG9tVmFsdWUoYXR0YWNraW5nUGxheWVyLmF0dGFjaykqMikgPiBnZW5SYW5kb21WYWx1ZShkZWZlbmRpbmdQbGF5ZXIuZGVmZW5jZSkpIHtcblxuICAgICAgdXBkYXRlU2NvcmUoYXR0YWNraW5nVGVhbSk7XG5cbiAgICAgIC8vICRjb21tZW50YXJ5Qm94LnRleHQoYCR7YXR0YWNraW5nUGxheWVyLm5hbWV9J3MgY2xpbmljYWwgZnJvbSB0aGUgc3BvdCEgR29hbCFgKTtcbiAgICAgIGdlbmVyYXRlQ29tbWVudGFyeSgncGVuYWx0eScsIGF0dGFja2luZ1BsYXllcik7XG4gICAgICAkKGAjJHthdHRhY2tpbmdUZWFtLnBsYWNlfUV2ZW50c2ApLmFwcGVuZChgPGkgY2xhc3M9J2ZhIGZhLWZ1dGJvbC1vJyBzdHlsZT0nZm9udC1zaXplOiAyMnB4OyBjb2xvcjp3aGl0ZTsgcGFkZGluZy10b3A6NXB4JyBhcmlhLWhpZGRlbj0ndHJ1ZSc+PC9pPiAke21hdGNoVGltZX0gbWluczogJHthdHRhY2tpbmdQbGF5ZXIubmFtZX0gc2NvcmVzIHBlbmFsdHk8YnIvPmApO1xuICAgICAgYXR0YWNraW5nUGxheWVyLmF0dGFjayArPSA1O1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5lcmF0ZUNvbW1lbnRhcnkoJ21pc3NlZFBlbmFsdHknLCBhdHRhY2tpbmdQbGF5ZXIpO1xuICAgICAgJChgIyR7YXR0YWNraW5nVGVhbS5wbGFjZX1FdmVudHNgKS5hcHBlbmQoYDxpIGNsYXNzPSdmYSBmYS1mdXRib2wtbycgc3R5bGU9J2ZvbnQtc2l6ZTogMjJweDsgY29sb3I6cmVkOyBwYWRkaW5nLXRvcDo1cHgnIGFyaWEtaGlkZGVuPSd0cnVlJz48L2k+ICR7bWF0Y2hUaW1lfSBtaW5zOiAke2F0dGFja2luZ1BsYXllci5uYW1lfSBtaXNzZWQgcGVuYWx0eTxici8+YCk7XG4gICAgICBkZWZlbmRpbmdQbGF5ZXIuZGVmZW5jZSArPSAxMDtcbiAgICAgIGF0dGFja2luZ1BsYXllci5hdHRhY2sgLT0gMTA7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RyYWlnaHRSZWQoZGVmZW5kaW5nVGVhbSkge1xuICAgIGNvbnN0IGRlZmVuZGluZ1BsYXllciA9IGRlZmVuZGluZ1RlYW0ucmFuZG9tUGxheWVyKCk7XG4gICAgaWYgKGdlblJhbmRvbVZhbHVlKGRlZmVuZGluZ1BsYXllci5kaXNjaXBsaW5lKSArICgxMDAtbWF0Y2hUaW1lKSA8IDI1KSB7XG4gICAgICBkZWZlbmRpbmdQbGF5ZXIucGxheWluZyA9IGZhbHNlO1xuICAgICAgZGVmZW5kaW5nUGxheWVyLnN0YXR1cyA9ICdlamVjdGVkJztcblxuICAgICAgLy8gJGNvbW1lbnRhcnlCb3gudGV4dCgnVGhlIHJlZmVyZWUgZ2l2ZXMgaGltIGEgc3RyYWlnaHQgcmVkIScpO1xuICAgICAgZ2VuZXJhdGVDb21tZW50YXJ5KCdzdHJhaWdodFJlZCcsIGRlZmVuZGluZ1BsYXllcik7XG4gICAgICAkKGAjJHtkZWZlbmRpbmdUZWFtLnBsYWNlfUV2ZW50c2ApLmFwcGVuZChgPGkgY2xhc3M9J2ZhIGZhLXNxdWFyZScgc3R5bGU9J2ZvbnQtc2l6ZTogMjRweDsgY29sb3I6IHJlZDsgcGFkZGluZy10b3A6NXB4JyBhcmlhLWhpZGRlbj0ndHJ1ZSc+PC9pPiAke21hdGNoVGltZX0gbWluczogJHtkZWZlbmRpbmdQbGF5ZXIubmFtZX0gc2VudCBvZmY8YnIvPmApO1xuICAgICAgLy8gaWYgKGRlZmVuZGluZ1RlYW0ucGxhY2UgPT09ICdob21lJykgcGF1c2VQbGF5KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlnVGVhbSh0ZWFtLCBzZWxlY3Rvcikge1xuICAgIC8vIFJlZmFjdG9yIGFsbCB0ZWFtcyBpbnRvIG9uZSBvYmplY3QsIHRoZW4gcGFzcyBpbiBvYmplY3Rbc2VsZWN0b3JdID0+IHNhdmUgYWJvdXQgMjAgbGluZXMgb2YgY29kZVxuICAgIGlmIChob21lVGVhbSA9PT0gbnVsbCkge1xuICAgICAgJCgnLmhvbWUtdGVhbSAgLnRlYW0tbmFtZScpLnRleHQoc2VsZWN0b3IpO1xuICAgICAgc3dpdGNoIChzZWxlY3Rvcikge1xuICAgICAgICBjYXNlICdUb3R0ZW5oYW0nOlxuICAgICAgICAgIGhvbWVUZWFtID0gc3B1cnM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ01hbiBVbml0ZWQnOlxuICAgICAgICAgIGhvbWVUZWFtID0gbWFuVW5pdGVkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdMaXZlcnBvb2wnOlxuICAgICAgICAgIGhvbWVUZWFtID0gbGl2ZXJwb29sO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdNYW4gQ2l0eSc6XG4gICAgICAgICAgaG9tZVRlYW0gPSBtYW5DaXR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFdmVydG9uJzpcbiAgICAgICAgICBob21lVGVhbSA9IGV2ZXJ0b247XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0NoZWxzZWEnOlxuICAgICAgICAgIGhvbWVUZWFtID0gY2hlbHNlYTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTGVpY2VzdGVyJzpcbiAgICAgICAgICBob21lVGVhbSA9IGxlaWNlc3RlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQXJzZW5hbCc6XG4gICAgICAgICAgaG9tZVRlYW0gPSBhcnNlbmFsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaG9tZVRlYW0ucGxhY2UgPSAnaG9tZSc7XG4gICAgICAkKCcuaG9tZS10ZWFtLCAjaG9tZUJhcicpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGhvbWVUZWFtLmNvbG9yc1swXSk7XG4gICAgICAkKCcuaG9tZS10ZWFtJykuY3NzKCdjb2xvcicsIGhvbWVUZWFtLmNvbG9yc1sxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoJy5hd2F5LXRlYW0gLnRlYW0tbmFtZScpLnRleHQoc2VsZWN0b3IpO1xuICAgICAgc3dpdGNoIChzZWxlY3Rvcikge1xuICAgICAgICBjYXNlICdUb3R0ZW5oYW0nOlxuICAgICAgICAgIGF3YXlUZWFtID0gc3B1cnM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ01hbiBVbml0ZWQnOlxuICAgICAgICAgIGF3YXlUZWFtID0gbWFuVW5pdGVkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdMaXZlcnBvb2wnOlxuICAgICAgICAgIGF3YXlUZWFtID0gbGl2ZXJwb29sO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdNYW4gQ2l0eSc6XG4gICAgICAgICAgYXdheVRlYW0gPSBtYW5DaXR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFdmVydG9uJzpcbiAgICAgICAgICBhd2F5VGVhbSA9IGV2ZXJ0b247XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0NoZWxzZWEnOlxuICAgICAgICAgIGF3YXlUZWFtID0gY2hlbHNlYTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnTGVpY2VzdGVyJzpcbiAgICAgICAgICBhd2F5VGVhbSA9IGxlaWNlc3RlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQXJzZW5hbCc6XG4gICAgICAgICAgYXdheVRlYW0gPSBhcnNlbmFsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYXdheVRlYW0ucGxhY2UgPSAnYXdheSc7XG4gICAgICAkKCcuYXdheS10ZWFtLCAucG9zc2Vzc2lvbi1iYXInKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBhd2F5VGVhbS5jb2xvcnNbMF0pO1xuICAgICAgJCgnLmF3YXktdGVhbScpLmNzcygnY29sb3InLCBhd2F5VGVhbS5jb2xvcnNbMV0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlQ29tbWVudGFyeShzY2VuYXJpbywgcGxheWVyKSB7XG4gICAgY29uc3QgY29tbWVudGFyeSA9IHtcbiAgICAgIGdvYWw6IFsnR29hbCEnLCAnSGVcXCdzIHNjb3JlZCEnLCBgVGhhdCdzIGEgZ3JlYXQgZmluaXNoIWAsIGBXaGF0IGEgZ29hbCBieSAke3BsYXllci5uYW1lfWAsIGAke3BsYXllci5uYW1lfSBmaW5pc2hlcyBvZmYgdGhlIG1vdmUhYF0sXG4gICAgICBmcmVla2ljazogW2BJdCdzIGEgZnJlZWtpY2tgLCBgJHtwbGF5ZXIubmFtZX0gdG8gdGFrZSB0aGUgZnJlZWtpY2tgLCBgSGUgbGluZXMgdXAgdGhlIGZyZWVraWNrYCwgYFRoaXMgaXMgYSBjaGFuY2UgdG8gZ2V0IGEgY3Jvc3MgaW5gXSxcbiAgICAgIHdhc3RlZEZyZWVraWNrOiBbYCR7cGxheWVyLm5hbWV9IGxvc2VzIHBvc3Nlc3Npb25gLCBgVGhhdCdzIGVuZGVkIHVwIGluIHJvdyBaYCwgYFRoZSBhdHRhY2sgYW1vdW50cyB0byBub3RoaW5nYCwgYCR7cGxheWVyLm5hbWV9IGhhcyB3YXN0ZWQgdGhhdCBvcHBvcnR1bml0eWAsIGAke3BsYXllci5uYW1lfSdzIGVmZm9ydCBnb2VzIG92ZXIgdGhlIGJhcmAsIGBIZSBoYW5kcyBiYWNrIHBvc3Nlc3Npb24gdG8gdGhlIG90aGVyIHRlYW1gXSxcbiAgICAgIHllbGxvdzogW2BIZSdzIGdvaW5nIGluIHRoZSBib29rYCwgYE91Y2ghICR7cGxheWVyLm5hbWV9IHdpbGwgZ2V0IGEgeWVsbG93IGZvciB0aGF0YCwgYFRoYXQncyBhIGJvb2tpbmdgLCBgSXQncyBhIHllbGxvdyFgLCBgVGhlIHJlZiBpcyB0YWtpbmcgaGlzIG5hbWVgXSxcbiAgICAgIHNlY29uZFllbGxvdzogW2BIZSdzIGFscmVhZHkgYmVlbiBib29rZWQuLi5gLCBgVGhhdCdzIGEgc2Vjb25kIHllbGxvd2AsIGAke3BsYXllci5uYW1lfSBpcyBzaG93biBhIHJlZCFgLCBgJHtwbGF5ZXIubmFtZX0gaXMgb2ZmYF0sXG4gICAgICBzdHJhaWdodFJlZDogW2Ake3BsYXllci5uYW1lfSBpcyBzaG93biBhIHN0cmFpZ2h0IHJlZCFgLCBgJHtwbGF5ZXIubmFtZX0gaXMgb2ZmYCwgYFRoZSByZWYgaGFzIGdpdmVuIGhpbSBzdHJhaWdodCByZWQhYF0sXG4gICAgICBwZW5hbHR5OiBbYFRoZSByZWZlcmVlIHBvaW50cyB0byB0aGUgc3BvdGAsIGBUaGF0J3MgYSBwZW5hbHR5YCwgYCR7cGxheWVyLm5hbWV9IGlzIGZvdWxlZCBpbiB0aGUgYXJlYWAsIGBUaGUgcmVmIGJsb3dzIGhpcyB3aGlzdGxlLiBQZW5hbHR5LmBdLFxuICAgICAgbWlzc2VkUGVuYWx0eTogW2BTYXZlZCFgLCBgSXQncyBvdmVyIHRoZSBiYXJgLCBgJHtwbGF5ZXIubmFtZX0gaGFzIG1pc3NlZCBpdCFgLCBgT2ggZGVhciEgJHtwbGF5ZXIubmFtZX0ncyBwdXQgaXQgd2lkZSdgXSxcbiAgICAgIGluanVyeTogW2Ake3BsYXllci5uYW1lfSdzIGlzIGdvaW5nIG9mZmAsYCR7cGxheWVyLm5hbWV9IGlzIGluanVyZWRgLGAke3BsYXllci5uYW1lfSBjYW4ndCBjb250aW51ZWBdLFxuICAgICAgY2hhbmNlOiBbYFRoZSBiYWxsIGlzIHdhc3RlZGAsIGBQb3NzZXNzaW9uIGlzIHNsb3BwaWx5IGdpdmVuIGF3YXlgLCBgVGhhdCBpcyB3YXN0ZWRgLCBgVGhlIHJlZmVyZWUgcHVsbHMgYmFjayBwbGF5YCwgYFRoZSBiYWxsIGdvZXMgb3V0IGZvciBhIHRocm93YCwgYEdvb2QgaW50ZXJjZXB0aW9uIWAsIGBIZSdzIHJvYmJlZCBoaW0gb2YgcG9zc2VzaW9uYCwgYFRoYXQgd2FzIGEgd2F5d2FyZCBiYWxsYCwgYEhlIGNhbid0IHF1aXRlIGdldCBvbiB0aGUgZW5kIG9mIHRoYXQgb25lYF0sXG4gICAgICBuZWFyTWlzczogW2Ake3BsYXllci5uYW1lfSBpcyBsaW1waW5nLCBidXQgaGUnbGwgYmUgb2theWAsIGBUaGF0J3MgYSBzb3JlIG9uZS5gLCBgJHtwbGF5ZXIubmFtZX0gbG9va3MgdG8gYmUgc3RydWdnbGluZ2AsIGBUaGVyZSdzIGEgbmFzdHkgY29taW5nIHRvZ2V0aGVyYCwgYFRoZSByZWZlcmVlIHdhdmVzIHBsYXkgb25gXVxuICAgIH07XG4gICAgY29uc3QgcmFuZG9tSW5kZXggPSBnZW5SYW5kb21WYWx1ZShjb21tZW50YXJ5W3NjZW5hcmlvXS5sZW5ndGgpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjb21tZW50YXJ5W3NjZW5hcmlvXVtyYW5kb21JbmRleF07XG4gICAgJGNvbW1lbnRhcnlCb3gudGV4dChgJHttZXNzYWdlfWApO1xuXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTY29yZSh0ZWFtT2JqZWN0KSB7XG4gICAgbGV0IHNjb3JlID0gbnVsbDtcbiAgICBsZXQgZ2V0U2NvcmUgPSBudWxsO1xuICAgIGlmICh0ZWFtT2JqZWN0LnBsYWNlID09PSAnaG9tZScpIHtcbiAgICAgIGdldFNjb3JlID0gJGhvbWVTY29yZS50ZXh0KCk7XG4gICAgICBzY29yZSA9IHBhcnNlRmxvYXQoZ2V0U2NvcmUpICsgMTtcbiAgICAgICRob21lU2NvcmUudGV4dChzY29yZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdldFNjb3JlID0gJGF3YXlTY29yZS50ZXh0KCk7XG4gICAgICBzY29yZSA9IHBhcnNlRmxvYXQoZ2V0U2NvcmUpICsgMTtcbiAgICAgICRhd2F5U2NvcmUudGV4dChzY29yZSk7XG4gICAgfVxuICB9XG59KTtcbiJdfQ==
